# -*- coding:utf-8 -*-
import os


def get_content(prefix = "", device_flag = ""):
    cur_fn = os.path.basename(__file__)
    content = f"""
// this file was generated by {cur_fn}, please do not manually modify 

[[nodiscard]] {device_flag} inline auto {prefix}face_forward({prefix}float3 n, {prefix}float3 i, {prefix}float3 n_ref) noexcept {{ return {prefix}dot(n_ref, i) < 0.0f ? n : -n; }}

[[nodiscard]] {device_flag} inline auto {prefix}face_forward({prefix}float3 v1, {prefix}float3 v2) noexcept {{ return {prefix}dot(v1, v2) > 0 ? v1 : -v1; }}

[[nodiscard]] {device_flag} inline auto {prefix}transpose(const {prefix}float2x2 m) noexcept {{
    return {prefix}make_float2x2(m[0].x, m[1].x, m[0].y, m[1].y);
}}

[[nodiscard]] {device_flag} inline auto {prefix}transpose(const {prefix}float3x3 m) noexcept {{
    return {prefix}make_float3x3(m[0].x, m[1].x, m[2].x, m[0].y, m[1].y, m[2].y, m[0].z, m[1].z, m[2].z);
}}

[[nodiscard]] {device_flag} inline auto {prefix}transpose(const {prefix}float4x4 m) noexcept {{
    return {prefix}make_float4x4(m[0].x, m[1].x, m[2].x, m[3].x, m[0].y, m[1].y, m[2].y, m[3].y, m[0].z, m[1].z, m[2].z, m[3].z, m[0].w, m[1].w, m[2].w, m[3].w);
}}

[[nodiscard]] {device_flag} inline auto {prefix}det(const {prefix}float2x2 m) noexcept {{
    return m[0][0] * m[1][1] - m[1][0] * m[0][1];
}}

[[nodiscard]] {device_flag} inline auto {prefix}det(const {prefix}float3x3 m) noexcept {{// from GLM
    return m[0].x * (m[1].y * m[2].z - m[2].y * m[1].z) - m[1].x * (m[0].y * m[2].z - m[2].y * m[0].z) + m[2].x * (m[0].y * m[1].z - m[1].y * m[0].z);
}}

[[nodiscard]] {device_flag} inline auto {prefix}det(const {prefix}float4x4 m) noexcept {{// from GLM
    const auto coef00 = m[2].z * m[3].w - m[3].z * m[2].w;
    const auto coef02 = m[1].z * m[3].w - m[3].z * m[1].w;
    const auto coef03 = m[1].z * m[2].w - m[2].z * m[1].w;
    const auto coef04 = m[2].y * m[3].w - m[3].y * m[2].w;
    const auto coef06 = m[1].y * m[3].w - m[3].y * m[1].w;
    const auto coef07 = m[1].y * m[2].w - m[2].y * m[1].w;
    const auto coef08 = m[2].y * m[3].z - m[3].y * m[2].z;
    const auto coef10 = m[1].y * m[3].z - m[3].y * m[1].z;
    const auto coef11 = m[1].y * m[2].z - m[2].y * m[1].z;
    const auto coef12 = m[2].x * m[3].w - m[3].x * m[2].w;
    const auto coef14 = m[1].x * m[3].w - m[3].x * m[1].w;
    const auto coef15 = m[1].x * m[2].w - m[2].x * m[1].w;
    const auto coef16 = m[2].x * m[3].z - m[3].x * m[2].z;
    const auto coef18 = m[1].x * m[3].z - m[3].x * m[1].z;
    const auto coef19 = m[1].x * m[2].z - m[2].x * m[1].z;
    const auto coef20 = m[2].x * m[3].y - m[3].x * m[2].y;
    const auto coef22 = m[1].x * m[3].y - m[3].x * m[1].y;
    const auto coef23 = m[1].x * m[2].y - m[2].x * m[1].y;
    const auto fac0 = {prefix}float4(coef00, coef00, coef02, coef03);
    const auto fac1 = {prefix}float4(coef04, coef04, coef06, coef07);
    const auto fac2 = {prefix}float4(coef08, coef08, coef10, coef11);
    const auto fac3 = {prefix}float4(coef12, coef12, coef14, coef15);
    const auto fac4 = {prefix}float4(coef16, coef16, coef18, coef19);
    const auto fac5 = {prefix}float4(coef20, coef20, coef22, coef23);
    const auto Vec0 = {prefix}float4(m[1].x, m[0].x, m[0].x, m[0].x);
    const auto Vec1 = {prefix}float4(m[1].y, m[0].y, m[0].y, m[0].y);
    const auto Vec2 = {prefix}float4(m[1].z, m[0].z, m[0].z, m[0].z);
    const auto Vec3 = {prefix}float4(m[1].w, m[0].w, m[0].w, m[0].w);
    const auto inv0 = Vec1 * fac0 - Vec2 * fac1 + Vec3 * fac2;
    const auto inv1 = Vec0 * fac0 - Vec2 * fac3 + Vec3 * fac4;
    const auto inv2 = Vec0 * fac1 - Vec1 * fac3 + Vec3 * fac5;
    const auto inv3 = Vec0 * fac2 - Vec1 * fac4 + Vec2 * fac5;
    const auto sign_a = {prefix}float4(+1.0f, -1.0f, +1.0f, -1.0f);
    const auto sign_b = {prefix}float4(-1.0f, +1.0f, -1.0f, +1.0f);
    const auto inv_0 = inv0 * sign_a;
    const auto inv_1 = inv1 * sign_b;
    const auto inv_2 = inv2 * sign_a;
    const auto inv_3 = inv3 * sign_b;
    const auto dot0 = m[0] * {prefix}float4(inv_0.x, inv_1.x, inv_2.x, inv_3.x);
    return dot0.x + dot0.y + dot0.z + dot0.w;
}}

[[nodiscard]] {device_flag} inline auto {prefix}inverse(const {prefix}float2x2 m) noexcept {{
    const auto one_over_determinant = 1.0f / (m[0][0] * m[1][1] - m[1][0] * m[0][1]);
    return {prefix}make_float2x2(m[1][1] * one_over_determinant,
                            -m[0][1] * one_over_determinant,
                            -m[1][0] * one_over_determinant,
                            +m[0][0] * one_over_determinant);
}}

[[nodiscard]] {device_flag} inline auto {prefix}inverse({prefix}float3x3 m) noexcept {{// from GLM
    {prefix}float one_over_determinant = 1.0f / (m[0].x * (m[1].y * m[2].z - m[2].y * m[1].z) -
                                            m[1].x * (m[0].y * m[2].z - m[2].y * m[0].z) +
                                            m[2].x * (m[0].y * m[1].z - m[1].y * m[0].z));
    return {prefix}make_float3x3(
        (m[1].y * m[2].z - m[2].y * m[1].z) * one_over_determinant,
        (m[2].y * m[0].z - m[0].y * m[2].z) * one_over_determinant,
        (m[0].y * m[1].z - m[1].y * m[0].z) * one_over_determinant,
        (m[2].x * m[1].z - m[1].x * m[2].z) * one_over_determinant,
        (m[0].x * m[2].z - m[2].x * m[0].z) * one_over_determinant,
        (m[1].x * m[0].z - m[0].x * m[1].z) * one_over_determinant,
        (m[1].x * m[2].y - m[2].x * m[1].y) * one_over_determinant,
        (m[2].x * m[0].y - m[0].x * m[2].y) * one_over_determinant,
        (m[0].x * m[1].y - m[1].x * m[0].y) * one_over_determinant);
}}

[[nodiscard]] {device_flag} inline auto {prefix}inverse(const {prefix}float4x4 m) noexcept {{// from GLM
    const auto coef00 = m[2].z * m[3].w - m[3].z * m[2].w;
    const auto coef02 = m[1].z * m[3].w - m[3].z * m[1].w;
    const auto coef03 = m[1].z * m[2].w - m[2].z * m[1].w;
    const auto coef04 = m[2].y * m[3].w - m[3].y * m[2].w;
    const auto coef06 = m[1].y * m[3].w - m[3].y * m[1].w;
    const auto coef07 = m[1].y * m[2].w - m[2].y * m[1].w;
    const auto coef08 = m[2].y * m[3].z - m[3].y * m[2].z;
    const auto coef10 = m[1].y * m[3].z - m[3].y * m[1].z;
    const auto coef11 = m[1].y * m[2].z - m[2].y * m[1].z;
    const auto coef12 = m[2].x * m[3].w - m[3].x * m[2].w;
    const auto coef14 = m[1].x * m[3].w - m[3].x * m[1].w;
    const auto coef15 = m[1].x * m[2].w - m[2].x * m[1].w;
    const auto coef16 = m[2].x * m[3].z - m[3].x * m[2].z;
    const auto coef18 = m[1].x * m[3].z - m[3].x * m[1].z;
    const auto coef19 = m[1].x * m[2].z - m[2].x * m[1].z;
    const auto coef20 = m[2].x * m[3].y - m[3].x * m[2].y;
    const auto coef22 = m[1].x * m[3].y - m[3].x * m[1].y;
    const auto coef23 = m[1].x * m[2].y - m[2].x * m[1].y;
    const auto fac0 = {prefix}float4(coef00, coef00, coef02, coef03);
    const auto fac1 = {prefix}float4(coef04, coef04, coef06, coef07);
    const auto fac2 = {prefix}float4(coef08, coef08, coef10, coef11);
    const auto fac3 = {prefix}float4(coef12, coef12, coef14, coef15);
    const auto fac4 = {prefix}float4(coef16, coef16, coef18, coef19);
    const auto fac5 = {prefix}float4(coef20, coef20, coef22, coef23);
    const auto Vec0 = {prefix}float4(m[1].x, m[0].x, m[0].x, m[0].x);
    const auto Vec1 = {prefix}float4(m[1].y, m[0].y, m[0].y, m[0].y);
    const auto Vec2 = {prefix}float4(m[1].z, m[0].z, m[0].z, m[0].z);
    const auto Vec3 = {prefix}float4(m[1].w, m[0].w, m[0].w, m[0].w);
    const auto inv0 = Vec1 * fac0 - Vec2 * fac1 + Vec3 * fac2;
    const auto inv1 = Vec0 * fac0 - Vec2 * fac3 + Vec3 * fac4;
    const auto inv2 = Vec0 * fac1 - Vec1 * fac3 + Vec3 * fac5;
    const auto inv3 = Vec0 * fac2 - Vec1 * fac4 + Vec2 * fac5;
    const auto sign_a = {prefix}float4(+1.0f, -1.0f, +1.0f, -1.0f);
    const auto sign_b = {prefix}float4(-1.0f, +1.0f, -1.0f, +1.0f);
    const auto inv_0 = inv0 * sign_a;
    const auto inv_1 = inv1 * sign_b;
    const auto inv_2 = inv2 * sign_a;
    const auto inv_3 = inv3 * sign_b;
    const auto dot0 = m[0] * {prefix}float4(inv_0.x, inv_1.x, inv_2.x, inv_3.x);
    const auto dot1 = dot0.x + dot0.y + dot0.z + dot0.w;
    const auto one_over_determinant = 1.0f / dot1;
    return {prefix}make_float4x4(inv_0 * one_over_determinant,
                            inv_1 * one_over_determinant,
                            inv_2 * one_over_determinant,
                            inv_3 * one_over_determinant);
}}

{device_flag} inline void {prefix}coordinate_system({prefix}float3 v1, {prefix}float3 &v2, {prefix}float3 &v3) noexcept {{
    v2 = {prefix}select({prefix}abs(v1.x) > {prefix}abs(v1.y),
                {prefix}make_float3(-v1.z, 0.f, v1.x) / {prefix}sqrt(v1.x * v1.x + v1.z * v1.z),
                {prefix}make_float3(0.f, v1.z, -v1.y) / {prefix}sqrt(v1.y * v1.y + v1.z * v1.z));
    v3 = {prefix}cross(v1, v2);
}}

"""
    return content

def main():
    curr_dir = os.path.dirname(os.path.realpath(__file__))


    print(curr_dir)
    fn = os.path.join(curr_dir, "common_lib.h")
    string = get_content()
    with open(fn, "w") as f:
        f.write(string)
        f.close()

    fn = os.path.join(curr_dir, "../backends/cuda/embed/cuda_device_math.h")
    string = get_content("oc_", "__device__")
    with open(fn, "w") as f:
        f.write(string)
        f.close()


if __name__ == "__main__":
    main()