// this file was generated by generate_cuda_math_lib.py, please do not manually modify 
 
#pragma once


template<typename T, oc_uint N>
__device__ oc_array<T, N> operator+(oc_array<T, N> arg) {
    oc_array<T, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = +arg[i];
    }
    return ret;
}

template<typename T, oc_uint N>
__device__ oc_array<T, N> operator-(oc_array<T, N> arg) {
    oc_array<T, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = -arg[i];
    }
    return ret;
}

template<typename T, oc_uint N>
__device__ oc_array<T, N> operator!(oc_array<T, N> arg) {
    oc_array<T, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = !arg[i];
    }
    return ret;
}

template<typename T, oc_uint N>
__device__ oc_array<T, N> operator~(oc_array<T, N> arg) {
    oc_array<T, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = ~arg[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator+(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} + U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] + rhs[i];
    }
    return ret;
}

template<typename T,typename U>
__device__ auto operator+(oc_array<T, 1> lhs, oc_array<U, 1> rhs) {
    oc_array<decltype(T{} + U{}), 1> ret;
    ret[0] = lhs[0] + rhs[0];
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator+(oc_array<T, N> lhs, U rhs) {
    oc_array<decltype(T{} + U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] + rhs;
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator+(oc_array<T, N> lhs, oc_array<U, 1> rhs) {
    return lhs + rhs[0];
}

template<typename T,typename U, oc_uint N>
__device__ auto operator+(T lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} + U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs + rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator+(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    return lhs[0] + rhs;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator-(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} - U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] - rhs[i];
    }
    return ret;
}

template<typename T,typename U>
__device__ auto operator-(oc_array<T, 1> lhs, oc_array<U, 1> rhs) {
    oc_array<decltype(T{} - U{}), 1> ret;
    ret[0] = lhs[0] - rhs[0];
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator-(oc_array<T, N> lhs, U rhs) {
    oc_array<decltype(T{} - U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] - rhs;
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator-(oc_array<T, N> lhs, oc_array<U, 1> rhs) {
    return lhs - rhs[0];
}

template<typename T,typename U, oc_uint N>
__device__ auto operator-(T lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} - U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs - rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator-(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    return lhs[0] - rhs;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator*(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} * U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] * rhs[i];
    }
    return ret;
}

template<typename T,typename U>
__device__ auto operator*(oc_array<T, 1> lhs, oc_array<U, 1> rhs) {
    oc_array<decltype(T{} * U{}), 1> ret;
    ret[0] = lhs[0] * rhs[0];
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator*(oc_array<T, N> lhs, U rhs) {
    oc_array<decltype(T{} * U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] * rhs;
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator*(oc_array<T, N> lhs, oc_array<U, 1> rhs) {
    return lhs * rhs[0];
}

template<typename T,typename U, oc_uint N>
__device__ auto operator*(T lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} * U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs * rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator*(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    return lhs[0] * rhs;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator/(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} / U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] / rhs[i];
    }
    return ret;
}

template<typename T,typename U>
__device__ auto operator/(oc_array<T, 1> lhs, oc_array<U, 1> rhs) {
    oc_array<decltype(T{} / U{}), 1> ret;
    ret[0] = lhs[0] / rhs[0];
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator/(oc_array<T, N> lhs, U rhs) {
    oc_array<decltype(T{} / U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] / rhs;
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator/(oc_array<T, N> lhs, oc_array<U, 1> rhs) {
    return lhs / rhs[0];
}

template<typename T,typename U, oc_uint N>
__device__ auto operator/(T lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} / U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs / rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator/(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    return lhs[0] / rhs;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator%(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} % U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] % rhs[i];
    }
    return ret;
}

template<typename T,typename U>
__device__ auto operator%(oc_array<T, 1> lhs, oc_array<U, 1> rhs) {
    oc_array<decltype(T{} % U{}), 1> ret;
    ret[0] = lhs[0] % rhs[0];
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator%(oc_array<T, N> lhs, U rhs) {
    oc_array<decltype(T{} % U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] % rhs;
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator%(oc_array<T, N> lhs, oc_array<U, 1> rhs) {
    return lhs % rhs[0];
}

template<typename T,typename U, oc_uint N>
__device__ auto operator%(T lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} % U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs % rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ auto operator%(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    return lhs[0] % rhs;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator==(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] == rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator==(oc_array<T, N> lhs, U rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] == rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator==(oc_array<T, N> lhs, oc_array<U, 1> rhs) {    
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] == rhs[0];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator==(T lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs == rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator==(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[0] == rhs[i];
    }
    return ret;
}



template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator!=(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] != rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator!=(oc_array<T, N> lhs, U rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] != rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator!=(oc_array<T, N> lhs, oc_array<U, 1> rhs) {    
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] != rhs[0];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator!=(T lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs != rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator!=(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[0] != rhs[i];
    }
    return ret;
}



template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator>(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] > rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator>(oc_array<T, N> lhs, U rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] > rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator>(oc_array<T, N> lhs, oc_array<U, 1> rhs) {    
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] > rhs[0];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator>(T lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs > rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator>(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[0] > rhs[i];
    }
    return ret;
}



template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator<(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] < rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator<(oc_array<T, N> lhs, U rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] < rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator<(oc_array<T, N> lhs, oc_array<U, 1> rhs) {    
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] < rhs[0];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator<(T lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs < rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator<(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[0] < rhs[i];
    }
    return ret;
}



template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator>=(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] >= rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator>=(oc_array<T, N> lhs, U rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] >= rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator>=(oc_array<T, N> lhs, oc_array<U, 1> rhs) {    
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] >= rhs[0];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator>=(T lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs >= rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator>=(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[0] >= rhs[i];
    }
    return ret;
}



template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator<=(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] <= rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator<=(oc_array<T, N> lhs, U rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] <= rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator<=(oc_array<T, N> lhs, oc_array<U, 1> rhs) {    
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] <= rhs[0];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator<=(T lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs <= rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator<=(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[0] <= rhs[i];
    }
    return ret;
}



template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator&&(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] && rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator&&(oc_array<T, N> lhs, U rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] && rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator&&(oc_array<T, N> lhs, oc_array<U, 1> rhs) {    
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] && rhs[0];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator&&(T lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs && rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator&&(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[0] && rhs[i];
    }
    return ret;
}



template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator||(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] || rhs[i];
    }
    return ret;
}

template<typename T,typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator||(oc_array<T, N> lhs, U rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] || rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator||(oc_array<T, N> lhs, oc_array<U, 1> rhs) {    
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] || rhs[0];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator||(T lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs || rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ oc_array<oc_bool, N> operator||(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    oc_array<oc_bool, N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[0] || rhs[i];
    }
    return ret;
}



template<typename T, typename U, oc_uint N>
__device__ auto operator&(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} & U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] & rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator&(oc_array<T, N> lhs, U rhs) {
    oc_array<decltype(T{} & U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] & rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator&(oc_array<T, N> lhs, oc_array<U, 1> rhs) {
    return lhs & rhs[0];
}

template<typename T, typename U, oc_uint N>
__device__ auto operator&(T lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} & U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs & rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator&(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    return lhs[0] & rhs;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator|(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} | U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] | rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator|(oc_array<T, N> lhs, U rhs) {
    oc_array<decltype(T{} | U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] | rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator|(oc_array<T, N> lhs, oc_array<U, 1> rhs) {
    return lhs | rhs[0];
}

template<typename T, typename U, oc_uint N>
__device__ auto operator|(T lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} | U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs | rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator|(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    return lhs[0] | rhs;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator^(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} ^ U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] ^ rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator^(oc_array<T, N> lhs, U rhs) {
    oc_array<decltype(T{} ^ U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] ^ rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator^(oc_array<T, N> lhs, oc_array<U, 1> rhs) {
    return lhs ^ rhs[0];
}

template<typename T, typename U, oc_uint N>
__device__ auto operator^(T lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} ^ U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs ^ rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator^(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    return lhs[0] ^ rhs;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator<<(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} << U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] << rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator<<(oc_array<T, N> lhs, U rhs) {
    oc_array<decltype(T{} << U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] << rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator<<(oc_array<T, N> lhs, oc_array<U, 1> rhs) {
    return lhs << rhs[0];
}

template<typename T, typename U, oc_uint N>
__device__ auto operator<<(T lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} << U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs << rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator<<(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    return lhs[0] << rhs;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator>>(oc_array<T, N> lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} >> U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] >> rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator>>(oc_array<T, N> lhs, U rhs) {
    oc_array<decltype(T{} >> U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs[i] >> rhs;
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator>>(oc_array<T, N> lhs, oc_array<U, 1> rhs) {
    return lhs >> rhs[0];
}

template<typename T, typename U, oc_uint N>
__device__ auto operator>>(T lhs, oc_array<U, N> rhs) {
    oc_array<decltype(T{} >> U{}), N> ret;
    for(oc_uint i = 0u; i < N; ++i) {
        ret[i] = lhs >> rhs[i];
    }
    return ret;
}

template<typename T, typename U, oc_uint N>
__device__ auto operator>>(oc_array<T, 1> lhs, oc_array<U, N> rhs) {
    return lhs[0] >> rhs;
}
__device__ oc_bool oc_any(oc_bool2 vec) { return vec.x || vec.y; }
__device__ oc_bool oc_any(oc_bool3 vec) { return vec.x || vec.y || vec.z; }
__device__ oc_bool oc_any(oc_bool4 vec) { return vec.x || vec.y || vec.z || vec.w; }
__device__ oc_bool oc_all(oc_bool2 vec) { return vec.x && vec.y; }
__device__ oc_bool oc_all(oc_bool3 vec) { return vec.x && vec.y && vec.z; }
__device__ oc_bool oc_all(oc_bool4 vec) { return vec.x && vec.y && vec.z && vec.w; }
__device__ oc_bool oc_none(oc_bool2 vec) { return !oc_any(vec); }
__device__ oc_bool oc_none(oc_bool3 vec) { return !oc_any(vec); }
__device__ oc_bool oc_none(oc_bool4 vec) { return !oc_any(vec); }

template<oc_uint N>
[[nodiscard]] oc_bool oc_any(oc_array<oc_bool, N> arg) {
    oc_bool ret = arg[0];
    for(oc_uint i = 1u; i < N; ++i) {
        ret = ret || arg[i];
    }
    return ret;
}

template<oc_uint N>
[[nodiscard]] oc_bool oc_all(oc_array<oc_bool, N> arg) {
    oc_bool ret = arg[0];
    for(oc_uint i = 1u; i < N; ++i) {
        ret = ret && arg[i];
    }
    return ret;
}

template<oc_uint N>
[[nodiscard]] oc_bool oc_none(oc_array<oc_bool, N> arg) {
    return !oc_any(arg);
}


__device__ oc_int oc_select(oc_bool pred, oc_int t, oc_int f) { return pred ? t : f; }
__device__ oc_int2 oc_select(oc_bool2 pred, oc_int2 t, oc_int2 f) {
	return oc_int2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_int3 oc_select(oc_bool3 pred, oc_int3 t, oc_int3 f) {
	return oc_int3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_int4 oc_select(oc_bool4 pred, oc_int4 t, oc_int4 f) {
	return oc_int4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}

__device__ oc_uint oc_select(oc_bool pred, oc_uint t, oc_uint f) { return pred ? t : f; }
__device__ oc_uint2 oc_select(oc_bool2 pred, oc_uint2 t, oc_uint2 f) {
	return oc_uint2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_uint3 oc_select(oc_bool3 pred, oc_uint3 t, oc_uint3 f) {
	return oc_uint3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_uint4 oc_select(oc_bool4 pred, oc_uint4 t, oc_uint4 f) {
	return oc_uint4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}

__device__ oc_float oc_select(oc_bool pred, oc_float t, oc_float f) { return pred ? t : f; }
__device__ oc_float2 oc_select(oc_bool2 pred, oc_float2 t, oc_float2 f) {
	return oc_float2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_float3 oc_select(oc_bool3 pred, oc_float3 t, oc_float3 f) {
	return oc_float3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_float4 oc_select(oc_bool4 pred, oc_float4 t, oc_float4 f) {
	return oc_float4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}

__device__ oc_bool oc_select(oc_bool pred, oc_bool t, oc_bool f) { return pred ? t : f; }
__device__ oc_bool2 oc_select(oc_bool2 pred, oc_bool2 t, oc_bool2 f) {
	return oc_bool2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_bool3 oc_select(oc_bool3 pred, oc_bool3 t, oc_bool3 f) {
	return oc_bool3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_bool4 oc_select(oc_bool4 pred, oc_bool4 t, oc_bool4 f) {
	return oc_bool4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}

__device__ oc_uchar oc_select(oc_bool pred, oc_uchar t, oc_uchar f) { return pred ? t : f; }
__device__ oc_uchar2 oc_select(oc_bool2 pred, oc_uchar2 t, oc_uchar2 f) {
	return oc_uchar2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_uchar3 oc_select(oc_bool3 pred, oc_uchar3 t, oc_uchar3 f) {
	return oc_uchar3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_uchar4 oc_select(oc_bool4 pred, oc_uchar4 t, oc_uchar4 f) {
	return oc_uchar4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}

__device__ oc_ushort oc_select(oc_bool pred, oc_ushort t, oc_ushort f) { return pred ? t : f; }
__device__ oc_ushort2 oc_select(oc_bool2 pred, oc_ushort2 t, oc_ushort2 f) {
	return oc_ushort2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_ushort3 oc_select(oc_bool3 pred, oc_ushort3 t, oc_ushort3 f) {
	return oc_ushort3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_ushort4 oc_select(oc_bool4 pred, oc_ushort4 t, oc_ushort4 f) {
	return oc_ushort4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}

__device__ oc_uint64t oc_select(oc_bool pred, oc_uint64t t, oc_uint64t f) { return pred ? t : f; }
__device__ oc_uint64t2 oc_select(oc_bool2 pred, oc_uint64t2 t, oc_uint64t2 f) {
	return oc_uint64t2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_uint64t3 oc_select(oc_bool3 pred, oc_uint64t3 t, oc_uint64t3 f) {
	return oc_uint64t3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_uint64t4 oc_select(oc_bool4 pred, oc_uint64t4 t, oc_uint64t4 f) {
	return oc_uint64t4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}


template<typename P, typename T, oc_uint N>
[[nodiscard]] __device__ oc_array<T, N> oc_select(const oc_array<P, N> &pred, const oc_array<T, N> &t, const oc_array<T, N> &f) noexcept {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_select(static_cast<oc_bool>(pred[i]), t[i], f[i]);
    }
    return ret;
}

__device__ oc_int oc_rcp(oc_int v) { return 1.f / v; }
__device__ oc_int2 oc_rcp(oc_int2 v) { return oc_int2(oc_rcp(v.x), oc_rcp(v.y)); }
__device__ oc_int3 oc_rcp(oc_int3 v) { return oc_int3(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z)); }
__device__ oc_int4 oc_rcp(oc_int4 v) { return oc_int4(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z), oc_rcp(v.w)); }
__device__ oc_uint oc_rcp(oc_uint v) { return 1.f / v; }
__device__ oc_uint2 oc_rcp(oc_uint2 v) { return oc_uint2(oc_rcp(v.x), oc_rcp(v.y)); }
__device__ oc_uint3 oc_rcp(oc_uint3 v) { return oc_uint3(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z)); }
__device__ oc_uint4 oc_rcp(oc_uint4 v) { return oc_uint4(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z), oc_rcp(v.w)); }
__device__ oc_float oc_rcp(oc_float v) { return 1.f / v; }
__device__ oc_float2 oc_rcp(oc_float2 v) { return oc_float2(oc_rcp(v.x), oc_rcp(v.y)); }
__device__ oc_float3 oc_rcp(oc_float3 v) { return oc_float3(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z)); }
__device__ oc_float4 oc_rcp(oc_float4 v) { return oc_float4(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z), oc_rcp(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_rcp(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_rcp(x[i]);
    return ret;
}

__device__ oc_int oc_sign(oc_int v) { return v >= 0 ? 1: -1; }
__device__ oc_int2 oc_sign(oc_int2 v) { return oc_int2(oc_sign(v.x), oc_sign(v.y)); }
__device__ oc_int3 oc_sign(oc_int3 v) { return oc_int3(oc_sign(v.x), oc_sign(v.y), oc_sign(v.z)); }
__device__ oc_int4 oc_sign(oc_int4 v) { return oc_int4(oc_sign(v.x), oc_sign(v.y), oc_sign(v.z), oc_sign(v.w)); }
__device__ oc_float oc_sign(oc_float v) { return v >= 0 ? 1: -1; }
__device__ oc_float2 oc_sign(oc_float2 v) { return oc_float2(oc_sign(v.x), oc_sign(v.y)); }
__device__ oc_float3 oc_sign(oc_float3 v) { return oc_float3(oc_sign(v.x), oc_sign(v.y), oc_sign(v.z)); }
__device__ oc_float4 oc_sign(oc_float4 v) { return oc_float4(oc_sign(v.x), oc_sign(v.y), oc_sign(v.z), oc_sign(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_sign(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_sign(x[i]);
    return ret;
}

__device__ oc_float oc_abs(oc_float v) { return fabsf(v); }
__device__ oc_float2 oc_abs(oc_float2 v) { return oc_float2(oc_abs(v.x), oc_abs(v.y)); }
__device__ oc_float3 oc_abs(oc_float3 v) { return oc_float3(oc_abs(v.x), oc_abs(v.y), oc_abs(v.z)); }
__device__ oc_float4 oc_abs(oc_float4 v) { return oc_float4(oc_abs(v.x), oc_abs(v.y), oc_abs(v.z), oc_abs(v.w)); }

__device__ oc_int oc_abs(oc_int v) { return abs(v); }
__device__ oc_int2 oc_abs(oc_int2 v) { return oc_int2(oc_abs(v.x), oc_abs(v.y)); }
__device__ oc_int3 oc_abs(oc_int3 v) { return oc_int3(oc_abs(v.x), oc_abs(v.y), oc_abs(v.z)); }
__device__ oc_int4 oc_abs(oc_int4 v) { return oc_int4(oc_abs(v.x), oc_abs(v.y), oc_abs(v.z), oc_abs(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_abs(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_abs(x[i]);
    return ret;
}

__device__ oc_float oc_ceil(oc_float v) { return ceilf(v); }
__device__ oc_float2 oc_ceil(oc_float2 v) { return oc_float2(oc_ceil(v.x), oc_ceil(v.y)); }
__device__ oc_float3 oc_ceil(oc_float3 v) { return oc_float3(oc_ceil(v.x), oc_ceil(v.y), oc_ceil(v.z)); }
__device__ oc_float4 oc_ceil(oc_float4 v) { return oc_float4(oc_ceil(v.x), oc_ceil(v.y), oc_ceil(v.z), oc_ceil(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_ceil(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_ceil(x[i]);
    return ret;
}

__device__ oc_float oc_floor(oc_float v) { return floorf(v); }
__device__ oc_float2 oc_floor(oc_float2 v) { return oc_float2(oc_floor(v.x), oc_floor(v.y)); }
__device__ oc_float3 oc_floor(oc_float3 v) { return oc_float3(oc_floor(v.x), oc_floor(v.y), oc_floor(v.z)); }
__device__ oc_float4 oc_floor(oc_float4 v) { return oc_float4(oc_floor(v.x), oc_floor(v.y), oc_floor(v.z), oc_floor(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_floor(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_floor(x[i]);
    return ret;
}

__device__ oc_float oc_fract(oc_float v) { return v - oc_floor(v); }
__device__ oc_float2 oc_fract(oc_float2 v) { return oc_float2(oc_fract(v.x), oc_fract(v.y)); }
__device__ oc_float3 oc_fract(oc_float3 v) { return oc_float3(oc_fract(v.x), oc_fract(v.y), oc_fract(v.z)); }
__device__ oc_float4 oc_fract(oc_float4 v) { return oc_float4(oc_fract(v.x), oc_fract(v.y), oc_fract(v.z), oc_fract(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_fract(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_fract(x[i]);
    return ret;
}

__device__ oc_float oc_round(oc_float v) { return roundf(v); }
__device__ oc_float2 oc_round(oc_float2 v) { return oc_float2(oc_round(v.x), oc_round(v.y)); }
__device__ oc_float3 oc_round(oc_float3 v) { return oc_float3(oc_round(v.x), oc_round(v.y), oc_round(v.z)); }
__device__ oc_float4 oc_round(oc_float4 v) { return oc_float4(oc_round(v.x), oc_round(v.y), oc_round(v.z), oc_round(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_round(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_round(x[i]);
    return ret;
}

__device__ oc_float oc_sin(oc_float v) { return sinf(v); }
__device__ oc_float2 oc_sin(oc_float2 v) { return oc_float2(oc_sin(v.x), oc_sin(v.y)); }
__device__ oc_float3 oc_sin(oc_float3 v) { return oc_float3(oc_sin(v.x), oc_sin(v.y), oc_sin(v.z)); }
__device__ oc_float4 oc_sin(oc_float4 v) { return oc_float4(oc_sin(v.x), oc_sin(v.y), oc_sin(v.z), oc_sin(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_sin(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_sin(x[i]);
    return ret;
}

__device__ oc_float oc_cos(oc_float v) { return cosf(v); }
__device__ oc_float2 oc_cos(oc_float2 v) { return oc_float2(oc_cos(v.x), oc_cos(v.y)); }
__device__ oc_float3 oc_cos(oc_float3 v) { return oc_float3(oc_cos(v.x), oc_cos(v.y), oc_cos(v.z)); }
__device__ oc_float4 oc_cos(oc_float4 v) { return oc_float4(oc_cos(v.x), oc_cos(v.y), oc_cos(v.z), oc_cos(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_cos(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_cos(x[i]);
    return ret;
}

__device__ oc_float oc_tan(oc_float v) { return tanf(v); }
__device__ oc_float2 oc_tan(oc_float2 v) { return oc_float2(oc_tan(v.x), oc_tan(v.y)); }
__device__ oc_float3 oc_tan(oc_float3 v) { return oc_float3(oc_tan(v.x), oc_tan(v.y), oc_tan(v.z)); }
__device__ oc_float4 oc_tan(oc_float4 v) { return oc_float4(oc_tan(v.x), oc_tan(v.y), oc_tan(v.z), oc_tan(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_tan(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_tan(x[i]);
    return ret;
}

__device__ oc_float oc_sinh(oc_float v) { return sinhf(v); }
__device__ oc_float2 oc_sinh(oc_float2 v) { return oc_float2(oc_sinh(v.x), oc_sinh(v.y)); }
__device__ oc_float3 oc_sinh(oc_float3 v) { return oc_float3(oc_sinh(v.x), oc_sinh(v.y), oc_sinh(v.z)); }
__device__ oc_float4 oc_sinh(oc_float4 v) { return oc_float4(oc_sinh(v.x), oc_sinh(v.y), oc_sinh(v.z), oc_sinh(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_sinh(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_sinh(x[i]);
    return ret;
}

__device__ oc_float oc_cosh(oc_float v) { return coshf(v); }
__device__ oc_float2 oc_cosh(oc_float2 v) { return oc_float2(oc_cosh(v.x), oc_cosh(v.y)); }
__device__ oc_float3 oc_cosh(oc_float3 v) { return oc_float3(oc_cosh(v.x), oc_cosh(v.y), oc_cosh(v.z)); }
__device__ oc_float4 oc_cosh(oc_float4 v) { return oc_float4(oc_cosh(v.x), oc_cosh(v.y), oc_cosh(v.z), oc_cosh(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_cosh(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_cosh(x[i]);
    return ret;
}

__device__ oc_float oc_tanh(oc_float v) { return tanhf(v); }
__device__ oc_float2 oc_tanh(oc_float2 v) { return oc_float2(oc_tanh(v.x), oc_tanh(v.y)); }
__device__ oc_float3 oc_tanh(oc_float3 v) { return oc_float3(oc_tanh(v.x), oc_tanh(v.y), oc_tanh(v.z)); }
__device__ oc_float4 oc_tanh(oc_float4 v) { return oc_float4(oc_tanh(v.x), oc_tanh(v.y), oc_tanh(v.z), oc_tanh(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_tanh(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_tanh(x[i]);
    return ret;
}

__device__ oc_float oc_asin(oc_float v) { return asinf(v); }
__device__ oc_float2 oc_asin(oc_float2 v) { return oc_float2(oc_asin(v.x), oc_asin(v.y)); }
__device__ oc_float3 oc_asin(oc_float3 v) { return oc_float3(oc_asin(v.x), oc_asin(v.y), oc_asin(v.z)); }
__device__ oc_float4 oc_asin(oc_float4 v) { return oc_float4(oc_asin(v.x), oc_asin(v.y), oc_asin(v.z), oc_asin(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_asin(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_asin(x[i]);
    return ret;
}

__device__ oc_float oc_acos(oc_float v) { return acosf(v); }
__device__ oc_float2 oc_acos(oc_float2 v) { return oc_float2(oc_acos(v.x), oc_acos(v.y)); }
__device__ oc_float3 oc_acos(oc_float3 v) { return oc_float3(oc_acos(v.x), oc_acos(v.y), oc_acos(v.z)); }
__device__ oc_float4 oc_acos(oc_float4 v) { return oc_float4(oc_acos(v.x), oc_acos(v.y), oc_acos(v.z), oc_acos(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_acos(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_acos(x[i]);
    return ret;
}

__device__ oc_float oc_atan(oc_float v) { return atanf(v); }
__device__ oc_float2 oc_atan(oc_float2 v) { return oc_float2(oc_atan(v.x), oc_atan(v.y)); }
__device__ oc_float3 oc_atan(oc_float3 v) { return oc_float3(oc_atan(v.x), oc_atan(v.y), oc_atan(v.z)); }
__device__ oc_float4 oc_atan(oc_float4 v) { return oc_float4(oc_atan(v.x), oc_atan(v.y), oc_atan(v.z), oc_atan(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_atan(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_atan(x[i]);
    return ret;
}

__device__ oc_float oc_asinh(oc_float v) { return asinhf(v); }
__device__ oc_float2 oc_asinh(oc_float2 v) { return oc_float2(oc_asinh(v.x), oc_asinh(v.y)); }
__device__ oc_float3 oc_asinh(oc_float3 v) { return oc_float3(oc_asinh(v.x), oc_asinh(v.y), oc_asinh(v.z)); }
__device__ oc_float4 oc_asinh(oc_float4 v) { return oc_float4(oc_asinh(v.x), oc_asinh(v.y), oc_asinh(v.z), oc_asinh(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_asinh(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_asinh(x[i]);
    return ret;
}

__device__ oc_float oc_acosh(oc_float v) { return acoshf(v); }
__device__ oc_float2 oc_acosh(oc_float2 v) { return oc_float2(oc_acosh(v.x), oc_acosh(v.y)); }
__device__ oc_float3 oc_acosh(oc_float3 v) { return oc_float3(oc_acosh(v.x), oc_acosh(v.y), oc_acosh(v.z)); }
__device__ oc_float4 oc_acosh(oc_float4 v) { return oc_float4(oc_acosh(v.x), oc_acosh(v.y), oc_acosh(v.z), oc_acosh(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_acosh(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_acosh(x[i]);
    return ret;
}

__device__ oc_float oc_atanh(oc_float v) { return atanhf(v); }
__device__ oc_float2 oc_atanh(oc_float2 v) { return oc_float2(oc_atanh(v.x), oc_atanh(v.y)); }
__device__ oc_float3 oc_atanh(oc_float3 v) { return oc_float3(oc_atanh(v.x), oc_atanh(v.y), oc_atanh(v.z)); }
__device__ oc_float4 oc_atanh(oc_float4 v) { return oc_float4(oc_atanh(v.x), oc_atanh(v.y), oc_atanh(v.z), oc_atanh(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_atanh(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_atanh(x[i]);
    return ret;
}

__device__ oc_bool oc_is_inf(oc_float v) { return isinf(v); }
__device__ oc_bool2 oc_is_inf(oc_float2 v) { return oc_bool2(oc_is_inf(v.x), oc_is_inf(v.y)); }
__device__ oc_bool3 oc_is_inf(oc_float3 v) { return oc_bool3(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z)); }
__device__ oc_bool4 oc_is_inf(oc_float4 v) { return oc_bool4(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z), oc_is_inf(v.w)); }

__device__ oc_bool oc_is_nan(oc_float v) { return isnan(v); }
__device__ oc_bool2 oc_is_nan(oc_float2 v) { return oc_bool2(oc_is_nan(v.x), oc_is_nan(v.y)); }
__device__ oc_bool3 oc_is_nan(oc_float3 v) { return oc_bool3(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z)); }
__device__ oc_bool4 oc_is_nan(oc_float4 v) { return oc_bool4(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z), oc_is_nan(v.w)); }

__device__ oc_bool oc_is_inf(oc_int v) { return false; }
__device__ oc_bool2 oc_is_inf(oc_int2 v) { return oc_bool2(oc_is_inf(v.x), oc_is_inf(v.y)); }
__device__ oc_bool3 oc_is_inf(oc_int3 v) { return oc_bool3(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z)); }
__device__ oc_bool4 oc_is_inf(oc_int4 v) { return oc_bool4(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z), oc_is_inf(v.w)); }
__device__ oc_bool oc_is_inf(oc_uint v) { return false; }
__device__ oc_bool2 oc_is_inf(oc_uint2 v) { return oc_bool2(oc_is_inf(v.x), oc_is_inf(v.y)); }
__device__ oc_bool3 oc_is_inf(oc_uint3 v) { return oc_bool3(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z)); }
__device__ oc_bool4 oc_is_inf(oc_uint4 v) { return oc_bool4(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z), oc_is_inf(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_is_inf(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_is_inf(x[i]);
    return ret;
}

__device__ oc_bool oc_is_nan(oc_int v) { return false; }
__device__ oc_bool2 oc_is_nan(oc_int2 v) { return oc_bool2(oc_is_nan(v.x), oc_is_nan(v.y)); }
__device__ oc_bool3 oc_is_nan(oc_int3 v) { return oc_bool3(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z)); }
__device__ oc_bool4 oc_is_nan(oc_int4 v) { return oc_bool4(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z), oc_is_nan(v.w)); }
__device__ oc_bool oc_is_nan(oc_uint v) { return false; }
__device__ oc_bool2 oc_is_nan(oc_uint2 v) { return oc_bool2(oc_is_nan(v.x), oc_is_nan(v.y)); }
__device__ oc_bool3 oc_is_nan(oc_uint3 v) { return oc_bool3(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z)); }
__device__ oc_bool4 oc_is_nan(oc_uint4 v) { return oc_bool4(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z), oc_is_nan(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_is_nan(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_is_nan(x[i]);
    return ret;
}

__device__ oc_float oc_exp(oc_float v) { return expf(v); }
__device__ oc_float2 oc_exp(oc_float2 v) { return oc_float2(oc_exp(v.x), oc_exp(v.y)); }
__device__ oc_float3 oc_exp(oc_float3 v) { return oc_float3(oc_exp(v.x), oc_exp(v.y), oc_exp(v.z)); }
__device__ oc_float4 oc_exp(oc_float4 v) { return oc_float4(oc_exp(v.x), oc_exp(v.y), oc_exp(v.z), oc_exp(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_exp(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_exp(x[i]);
    return ret;
}

__device__ oc_float oc_exp2(oc_float v) { return exp2f(v); }
__device__ oc_float2 oc_exp2(oc_float2 v) { return oc_float2(oc_exp2(v.x), oc_exp2(v.y)); }
__device__ oc_float3 oc_exp2(oc_float3 v) { return oc_float3(oc_exp2(v.x), oc_exp2(v.y), oc_exp2(v.z)); }
__device__ oc_float4 oc_exp2(oc_float4 v) { return oc_float4(oc_exp2(v.x), oc_exp2(v.y), oc_exp2(v.z), oc_exp2(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_exp2(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_exp2(x[i]);
    return ret;
}

__device__ oc_float oc_exp10(oc_float v) { return exp10f(v); }
__device__ oc_float2 oc_exp10(oc_float2 v) { return oc_float2(oc_exp10(v.x), oc_exp10(v.y)); }
__device__ oc_float3 oc_exp10(oc_float3 v) { return oc_float3(oc_exp10(v.x), oc_exp10(v.y), oc_exp10(v.z)); }
__device__ oc_float4 oc_exp10(oc_float4 v) { return oc_float4(oc_exp10(v.x), oc_exp10(v.y), oc_exp10(v.z), oc_exp10(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_exp10(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_exp10(x[i]);
    return ret;
}

__device__ oc_float oc_log(oc_float v) { return logf(v); }
__device__ oc_float2 oc_log(oc_float2 v) { return oc_float2(oc_log(v.x), oc_log(v.y)); }
__device__ oc_float3 oc_log(oc_float3 v) { return oc_float3(oc_log(v.x), oc_log(v.y), oc_log(v.z)); }
__device__ oc_float4 oc_log(oc_float4 v) { return oc_float4(oc_log(v.x), oc_log(v.y), oc_log(v.z), oc_log(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_log(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_log(x[i]);
    return ret;
}

__device__ oc_float oc_log2(oc_float v) { return log2f(v); }
__device__ oc_float2 oc_log2(oc_float2 v) { return oc_float2(oc_log2(v.x), oc_log2(v.y)); }
__device__ oc_float3 oc_log2(oc_float3 v) { return oc_float3(oc_log2(v.x), oc_log2(v.y), oc_log2(v.z)); }
__device__ oc_float4 oc_log2(oc_float4 v) { return oc_float4(oc_log2(v.x), oc_log2(v.y), oc_log2(v.z), oc_log2(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_log2(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_log2(x[i]);
    return ret;
}

__device__ oc_float oc_log10(oc_float v) { return log10f(v); }
__device__ oc_float2 oc_log10(oc_float2 v) { return oc_float2(oc_log10(v.x), oc_log10(v.y)); }
__device__ oc_float3 oc_log10(oc_float3 v) { return oc_float3(oc_log10(v.x), oc_log10(v.y), oc_log10(v.z)); }
__device__ oc_float4 oc_log10(oc_float4 v) { return oc_float4(oc_log10(v.x), oc_log10(v.y), oc_log10(v.z), oc_log10(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_log10(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_log10(x[i]);
    return ret;
}

__device__ oc_int oc_sqr(oc_int v) { return v * v; }
__device__ oc_int2 oc_sqr(oc_int2 v) { return oc_int2(oc_sqr(v.x), oc_sqr(v.y)); }
__device__ oc_int3 oc_sqr(oc_int3 v) { return oc_int3(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z)); }
__device__ oc_int4 oc_sqr(oc_int4 v) { return oc_int4(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z), oc_sqr(v.w)); }
__device__ oc_uint oc_sqr(oc_uint v) { return v * v; }
__device__ oc_uint2 oc_sqr(oc_uint2 v) { return oc_uint2(oc_sqr(v.x), oc_sqr(v.y)); }
__device__ oc_uint3 oc_sqr(oc_uint3 v) { return oc_uint3(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z)); }
__device__ oc_uint4 oc_sqr(oc_uint4 v) { return oc_uint4(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z), oc_sqr(v.w)); }
__device__ oc_float oc_sqr(oc_float v) { return v * v; }
__device__ oc_float2 oc_sqr(oc_float2 v) { return oc_float2(oc_sqr(v.x), oc_sqr(v.y)); }
__device__ oc_float3 oc_sqr(oc_float3 v) { return oc_float3(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z)); }
__device__ oc_float4 oc_sqr(oc_float4 v) { return oc_float4(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z), oc_sqr(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_sqr(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_sqr(x[i]);
    return ret;
}

__device__ oc_float oc_sqrt(oc_float v) { return sqrtf(v); }
__device__ oc_float2 oc_sqrt(oc_float2 v) { return oc_float2(oc_sqrt(v.x), oc_sqrt(v.y)); }
__device__ oc_float3 oc_sqrt(oc_float3 v) { return oc_float3(oc_sqrt(v.x), oc_sqrt(v.y), oc_sqrt(v.z)); }
__device__ oc_float4 oc_sqrt(oc_float4 v) { return oc_float4(oc_sqrt(v.x), oc_sqrt(v.y), oc_sqrt(v.z), oc_sqrt(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_sqrt(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_sqrt(x[i]);
    return ret;
}

__device__ oc_float oc_rsqrt(oc_float v) { return rsqrtf(v); }
__device__ oc_float2 oc_rsqrt(oc_float2 v) { return oc_float2(oc_rsqrt(v.x), oc_rsqrt(v.y)); }
__device__ oc_float3 oc_rsqrt(oc_float3 v) { return oc_float3(oc_rsqrt(v.x), oc_rsqrt(v.y), oc_rsqrt(v.z)); }
__device__ oc_float4 oc_rsqrt(oc_float4 v) { return oc_float4(oc_rsqrt(v.x), oc_rsqrt(v.y), oc_rsqrt(v.z), oc_rsqrt(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_rsqrt(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_rsqrt(x[i]);
    return ret;
}

__device__ oc_float oc_degrees(oc_float v) { return v * (180.f / 3.1415926535f); }
__device__ oc_float2 oc_degrees(oc_float2 v) { return oc_float2(oc_degrees(v.x), oc_degrees(v.y)); }
__device__ oc_float3 oc_degrees(oc_float3 v) { return oc_float3(oc_degrees(v.x), oc_degrees(v.y), oc_degrees(v.z)); }
__device__ oc_float4 oc_degrees(oc_float4 v) { return oc_float4(oc_degrees(v.x), oc_degrees(v.y), oc_degrees(v.z), oc_degrees(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_degrees(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_degrees(x[i]);
    return ret;
}

__device__ oc_float oc_radians(oc_float v) { return v * (3.1415926535f / 180.f); }
__device__ oc_float2 oc_radians(oc_float2 v) { return oc_float2(oc_radians(v.x), oc_radians(v.y)); }
__device__ oc_float3 oc_radians(oc_float3 v) { return oc_float3(oc_radians(v.x), oc_radians(v.y), oc_radians(v.z)); }
__device__ oc_float4 oc_radians(oc_float4 v) { return oc_float4(oc_radians(v.x), oc_radians(v.y), oc_radians(v.z), oc_radians(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_radians(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_radians(x[i]);
    return ret;
}

__device__ oc_float oc_saturate(oc_float v) { return fminf(1.f, fmaxf(0.f, v)); }
__device__ oc_float2 oc_saturate(oc_float2 v) { return oc_float2(oc_saturate(v.x), oc_saturate(v.y)); }
__device__ oc_float3 oc_saturate(oc_float3 v) { return oc_float3(oc_saturate(v.x), oc_saturate(v.y), oc_saturate(v.z)); }
__device__ oc_float4 oc_saturate(oc_float4 v) { return oc_float4(oc_saturate(v.x), oc_saturate(v.y), oc_saturate(v.z), oc_saturate(v.w)); }
template<typename T, oc_uint N>
__device__ oc_array<T, N> oc_saturate(oc_array<T, N> x) {
    oc_array<T, N> ret{};
    for(oc_uint i = 0; i < N; ++i) ret[i] = oc_saturate(x[i]);
    return ret;
}

__device__ oc_float oc_pow(oc_float lhs, oc_float rhs) { return powf(lhs, rhs); }
__device__ oc_float2 oc_pow(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_pow(lhs.x, rhs.x), oc_pow(lhs.y, rhs.y)); }
__device__ oc_float3 oc_pow(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_pow(lhs.x, rhs.x), oc_pow(lhs.y, rhs.y), oc_pow(lhs.z, rhs.z)); }
__device__ oc_float4 oc_pow(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_pow(lhs.x, rhs.x), oc_pow(lhs.y, rhs.y), oc_pow(lhs.z, rhs.z), oc_pow(lhs.w, rhs.w)); }
template<oc_uint N>
oc_array<oc_float, N> oc_pow(oc_array<oc_float, N> lhs, oc_array<oc_float, N> rhs) {
    oc_array<oc_float, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_pow(lhs[i], rhs[i]);
    }
    return ret;
}

__device__ oc_float oc_fmod(oc_float lhs, oc_float rhs) { return fmodf(lhs, rhs); }
__device__ oc_float2 oc_fmod(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_fmod(lhs.x, rhs.x), oc_fmod(lhs.y, rhs.y)); }
__device__ oc_float3 oc_fmod(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_fmod(lhs.x, rhs.x), oc_fmod(lhs.y, rhs.y), oc_fmod(lhs.z, rhs.z)); }
__device__ oc_float4 oc_fmod(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_fmod(lhs.x, rhs.x), oc_fmod(lhs.y, rhs.y), oc_fmod(lhs.z, rhs.z), oc_fmod(lhs.w, rhs.w)); }
template<oc_uint N>
oc_array<oc_float, N> oc_fmod(oc_array<oc_float, N> lhs, oc_array<oc_float, N> rhs) {
    oc_array<oc_float, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_fmod(lhs[i], rhs[i]);
    }
    return ret;
}

__device__ oc_float oc_mod(oc_float lhs, oc_float rhs) { return lhs - rhs * oc_floor(lhs / rhs); }
__device__ oc_float2 oc_mod(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_mod(lhs.x, rhs.x), oc_mod(lhs.y, rhs.y)); }
__device__ oc_float3 oc_mod(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_mod(lhs.x, rhs.x), oc_mod(lhs.y, rhs.y), oc_mod(lhs.z, rhs.z)); }
__device__ oc_float4 oc_mod(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_mod(lhs.x, rhs.x), oc_mod(lhs.y, rhs.y), oc_mod(lhs.z, rhs.z), oc_mod(lhs.w, rhs.w)); }
template<oc_uint N>
oc_array<oc_float, N> oc_mod(oc_array<oc_float, N> lhs, oc_array<oc_float, N> rhs) {
    oc_array<oc_float, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_mod(lhs[i], rhs[i]);
    }
    return ret;
}

__device__ oc_int oc_min(oc_int lhs, oc_int rhs) { return fminf(lhs, rhs); }
__device__ oc_int2 oc_min(oc_int2 lhs, oc_int2 rhs) { return oc_int2(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y)); }
__device__ oc_int3 oc_min(oc_int3 lhs, oc_int3 rhs) { return oc_int3(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z)); }
__device__ oc_int4 oc_min(oc_int4 lhs, oc_int4 rhs) { return oc_int4(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z), oc_min(lhs.w, rhs.w)); }
__device__ oc_uint oc_min(oc_uint lhs, oc_uint rhs) { return fminf(lhs, rhs); }
__device__ oc_uint2 oc_min(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y)); }
__device__ oc_uint3 oc_min(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z)); }
__device__ oc_uint4 oc_min(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z), oc_min(lhs.w, rhs.w)); }
__device__ oc_float oc_min(oc_float lhs, oc_float rhs) { return fminf(lhs, rhs); }
__device__ oc_float2 oc_min(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y)); }
__device__ oc_float3 oc_min(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z)); }
__device__ oc_float4 oc_min(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z), oc_min(lhs.w, rhs.w)); }
template<oc_uint N>
oc_array<oc_float, N> oc_min(oc_array<oc_float, N> lhs, oc_array<oc_float, N> rhs) {
    oc_array<oc_float, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_min(lhs[i], rhs[i]);
    }
    return ret;
}

__device__ oc_int oc_max(oc_int lhs, oc_int rhs) { return fmaxf(lhs, rhs); }
__device__ oc_int2 oc_max(oc_int2 lhs, oc_int2 rhs) { return oc_int2(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y)); }
__device__ oc_int3 oc_max(oc_int3 lhs, oc_int3 rhs) { return oc_int3(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z)); }
__device__ oc_int4 oc_max(oc_int4 lhs, oc_int4 rhs) { return oc_int4(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z), oc_max(lhs.w, rhs.w)); }
__device__ oc_uint oc_max(oc_uint lhs, oc_uint rhs) { return fmaxf(lhs, rhs); }
__device__ oc_uint2 oc_max(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y)); }
__device__ oc_uint3 oc_max(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z)); }
__device__ oc_uint4 oc_max(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z), oc_max(lhs.w, rhs.w)); }
__device__ oc_float oc_max(oc_float lhs, oc_float rhs) { return fmaxf(lhs, rhs); }
__device__ oc_float2 oc_max(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y)); }
__device__ oc_float3 oc_max(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z)); }
__device__ oc_float4 oc_max(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z), oc_max(lhs.w, rhs.w)); }
template<oc_uint N>
oc_array<oc_float, N> oc_max(oc_array<oc_float, N> lhs, oc_array<oc_float, N> rhs) {
    oc_array<oc_float, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_max(lhs[i], rhs[i]);
    }
    return ret;
}

__device__ oc_float oc_atan2(oc_float lhs, oc_float rhs) { return atan2f(lhs, rhs); }
__device__ oc_float2 oc_atan2(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_atan2(lhs.x, rhs.x), oc_atan2(lhs.y, rhs.y)); }
__device__ oc_float3 oc_atan2(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_atan2(lhs.x, rhs.x), oc_atan2(lhs.y, rhs.y), oc_atan2(lhs.z, rhs.z)); }
__device__ oc_float4 oc_atan2(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_atan2(lhs.x, rhs.x), oc_atan2(lhs.y, rhs.y), oc_atan2(lhs.z, rhs.z), oc_atan2(lhs.w, rhs.w)); }
template<oc_uint N>
oc_array<oc_float, N> oc_atan2(oc_array<oc_float, N> lhs, oc_array<oc_float, N> rhs) {
    oc_array<oc_float, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_atan2(lhs[i], rhs[i]);
    }
    return ret;
}

__device__ oc_float oc_copysign(oc_float lhs, oc_float rhs) { return ::copysignf(lhs, rhs); }
__device__ oc_float2 oc_copysign(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_copysign(lhs.x, rhs.x), oc_copysign(lhs.y, rhs.y)); }
__device__ oc_float3 oc_copysign(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_copysign(lhs.x, rhs.x), oc_copysign(lhs.y, rhs.y), oc_copysign(lhs.z, rhs.z)); }
__device__ oc_float4 oc_copysign(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_copysign(lhs.x, rhs.x), oc_copysign(lhs.y, rhs.y), oc_copysign(lhs.z, rhs.z), oc_copysign(lhs.w, rhs.w)); }
template<oc_uint N>
oc_array<oc_float, N> oc_copysign(oc_array<oc_float, N> lhs, oc_array<oc_float, N> rhs) {
    oc_array<oc_float, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_copysign(lhs[i], rhs[i]);
    }
    return ret;
}

__device__ oc_float oc_lerp(oc_float v0, oc_float v1, oc_float v2) { return v1 + v0 * (v2 - v1); }
__device__ oc_float2 oc_lerp(oc_float2 v0, oc_float2 v1, oc_float2 v2) { return oc_float2(oc_lerp(v0.x, v1.x, v2.x), oc_lerp(v0.y, v1.y, v2.y)); }
__device__ oc_float3 oc_lerp(oc_float3 v0, oc_float3 v1, oc_float3 v2) { return oc_float3(oc_lerp(v0.x, v1.x, v2.x), oc_lerp(v0.y, v1.y, v2.y), oc_lerp(v0.z, v1.z, v2.z)); }
__device__ oc_float4 oc_lerp(oc_float4 v0, oc_float4 v1, oc_float4 v2) { return oc_float4(oc_lerp(v0.x, v1.x, v2.x), oc_lerp(v0.y, v1.y, v2.y), oc_lerp(v0.z, v1.z, v2.z), oc_lerp(v0.w, v1.w, v2.w)); }
template<oc_uint N>
oc_array<oc_float, N> oc_lerp(oc_array<oc_float, N> v0, oc_array<oc_float, N> v1, oc_array<oc_float, N> v2) {
    oc_array<oc_float, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_lerp(v0[i], v1[i], v2[i]);
    }
    return ret;
}


__device__ oc_float oc_clamp(oc_float v0, oc_float v1, oc_float v2) { return oc_min(v2, oc_max(v1, v0)); }
__device__ oc_float2 oc_clamp(oc_float2 v0, oc_float2 v1, oc_float2 v2) { return oc_float2(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y)); }
__device__ oc_float3 oc_clamp(oc_float3 v0, oc_float3 v1, oc_float3 v2) { return oc_float3(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z)); }
__device__ oc_float4 oc_clamp(oc_float4 v0, oc_float4 v1, oc_float4 v2) { return oc_float4(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z), oc_clamp(v0.w, v1.w, v2.w)); }
template<oc_uint N>
oc_array<oc_float, N> oc_clamp(oc_array<oc_float, N> v0, oc_array<oc_float, N> v1, oc_array<oc_float, N> v2) {
    oc_array<oc_float, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_clamp(v0[i], v1[i], v2[i]);
    }
    return ret;
}

__device__ oc_uint oc_clamp(oc_uint v0, oc_uint v1, oc_uint v2) { return oc_min(v2, oc_max(v1, v0)); }
__device__ oc_uint2 oc_clamp(oc_uint2 v0, oc_uint2 v1, oc_uint2 v2) { return oc_uint2(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y)); }
__device__ oc_uint3 oc_clamp(oc_uint3 v0, oc_uint3 v1, oc_uint3 v2) { return oc_uint3(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z)); }
__device__ oc_uint4 oc_clamp(oc_uint4 v0, oc_uint4 v1, oc_uint4 v2) { return oc_uint4(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z), oc_clamp(v0.w, v1.w, v2.w)); }
template<oc_uint N>
oc_array<oc_uint, N> oc_clamp(oc_array<oc_uint, N> v0, oc_array<oc_uint, N> v1, oc_array<oc_uint, N> v2) {
    oc_array<oc_uint, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_clamp(v0[i], v1[i], v2[i]);
    }
    return ret;
}

__device__ oc_int oc_clamp(oc_int v0, oc_int v1, oc_int v2) { return oc_min(v2, oc_max(v1, v0)); }
__device__ oc_int2 oc_clamp(oc_int2 v0, oc_int2 v1, oc_int2 v2) { return oc_int2(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y)); }
__device__ oc_int3 oc_clamp(oc_int3 v0, oc_int3 v1, oc_int3 v2) { return oc_int3(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z)); }
__device__ oc_int4 oc_clamp(oc_int4 v0, oc_int4 v1, oc_int4 v2) { return oc_int4(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z), oc_clamp(v0.w, v1.w, v2.w)); }
template<oc_uint N>
oc_array<oc_int, N> oc_clamp(oc_array<oc_int, N> v0, oc_array<oc_int, N> v1, oc_array<oc_int, N> v2) {
    oc_array<oc_int, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_clamp(v0[i], v1[i], v2[i]);
    }
    return ret;
}


__device__ oc_float oc_fma(oc_float v0, oc_float v1, oc_float v2) { return fmaf(v0, v1, v2); }
__device__ oc_float2 oc_fma(oc_float2 v0, oc_float2 v1, oc_float2 v2) { return oc_float2(oc_fma(v0.x, v1.x, v2.x), oc_fma(v0.y, v1.y, v2.y)); }
__device__ oc_float3 oc_fma(oc_float3 v0, oc_float3 v1, oc_float3 v2) { return oc_float3(oc_fma(v0.x, v1.x, v2.x), oc_fma(v0.y, v1.y, v2.y), oc_fma(v0.z, v1.z, v2.z)); }
__device__ oc_float4 oc_fma(oc_float4 v0, oc_float4 v1, oc_float4 v2) { return oc_float4(oc_fma(v0.x, v1.x, v2.x), oc_fma(v0.y, v1.y, v2.y), oc_fma(v0.z, v1.z, v2.z), oc_fma(v0.w, v1.w, v2.w)); }
template<oc_uint N>
oc_array<oc_float, N> oc_fma(oc_array<oc_float, N> v0, oc_array<oc_float, N> v1, oc_array<oc_float, N> v2) {
    oc_array<oc_float, N> ret;
    for(oc_uint i = 0; i < N; ++i) {
        ret[i] = oc_fma(v0[i], v1[i], v2[i]);
    }
    return ret;
}


__device__ inline auto oc_dot(oc_float2 a, oc_float2 b) { return a.x * b.x + a.y * b.y; }
__device__ inline auto oc_length(oc_float2 v) noexcept { return oc_sqrt(oc_dot(v, v)); }
__device__ inline auto oc_length_squared(oc_float2 v) noexcept { return oc_dot(v, v); }
__device__ inline auto oc_distance(oc_float2 a, oc_float2 b) noexcept { return oc_length(a - b); }
__device__ inline auto oc_distance_squared(oc_float2 a, oc_float2 b) noexcept { return oc_length_squared(a - b); }
__device__ inline auto oc_normalize(oc_float2 v) noexcept { return v * oc_rsqrt(oc_dot(v, v)); }

__device__ inline auto oc_dot(oc_float3 a, oc_float3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; }
__device__ inline auto oc_length(oc_float3 v) noexcept { return oc_sqrt(oc_dot(v, v)); }
__device__ inline auto oc_length_squared(oc_float3 v) noexcept { return oc_dot(v, v); }
__device__ inline auto oc_distance(oc_float3 a, oc_float3 b) noexcept { return oc_length(a - b); }
__device__ inline auto oc_distance_squared(oc_float3 a, oc_float3 b) noexcept { return oc_length_squared(a - b); }
__device__ inline auto oc_normalize(oc_float3 v) noexcept { return v * oc_rsqrt(oc_dot(v, v)); }

__device__ inline auto oc_dot(oc_float4 a, oc_float4 b) { return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w; }
__device__ inline auto oc_length(oc_float4 v) noexcept { return oc_sqrt(oc_dot(v, v)); }
__device__ inline auto oc_length_squared(oc_float4 v) noexcept { return oc_dot(v, v); }
__device__ inline auto oc_distance(oc_float4 a, oc_float4 b) noexcept { return oc_length(a - b); }
__device__ inline auto oc_distance_squared(oc_float4 a, oc_float4 b) noexcept { return oc_length_squared(a - b); }
__device__ inline auto oc_normalize(oc_float4 v) noexcept { return v * oc_rsqrt(oc_dot(v, v)); }

[[nodiscard]] __device__ inline auto oc_cross(oc_int3 u, oc_int3 v) noexcept { return oc_int3(u.y * v.z - v.y * u.z, u.z * v.x - v.z * u.x, u.x * v.y - v.x * u.y);  }
[[nodiscard]] __device__ inline auto oc_cross(oc_uint3 u, oc_uint3 v) noexcept { return oc_uint3(u.y * v.z - v.y * u.z, u.z * v.x - v.z * u.x, u.x * v.y - v.x * u.y);  }
[[nodiscard]] __device__ inline auto oc_cross(oc_float3 u, oc_float3 v) noexcept { return oc_float3(u.y * v.z - v.y * u.z, u.z * v.x - v.z * u.x, u.x * v.y - v.x * u.y);  }

[[nodiscard]] __device__ inline auto oc_make_int2(oc_int s = 0) noexcept { return oc_int2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_int x, oc_int y) noexcept { return oc_int2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_int2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_int3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_int4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uint2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uint3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uint4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_float2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_float3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_float4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_bool2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_bool3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_bool4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uchar2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uchar3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uchar4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_ushort2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_ushort3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_ushort4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uint64t2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uint64t3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uint64t4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int s = 0) noexcept { return oc_int3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int x, oc_int y, oc_int z) noexcept { return oc_int3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int x, oc_int2 yz) noexcept { return oc_int3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int2 xy, oc_int z) noexcept { return oc_int3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_uint3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_uint4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_float3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_float4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_bool3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_bool4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_uchar3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_uchar4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_ushort3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_ushort4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_uint64t3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_uint64t4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int s = 0) noexcept { return oc_int4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int x, oc_int y, oc_int z, oc_int w) noexcept { return oc_int4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int x, oc_int y, oc_int2 zw) noexcept { return oc_int4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int x, oc_int2 yz, oc_int w) noexcept { return oc_int4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int2 xy, oc_int z, oc_int w) noexcept { return oc_int4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int2 xy, oc_int2 zw) noexcept { return oc_int4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int x, oc_int3 yzw) noexcept { return oc_int4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int3 xyz, oc_int w) noexcept { return oc_int4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_uint4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_float4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_bool4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_uchar4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_ushort4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_uint64t4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint s = 0) noexcept { return oc_uint2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint x, oc_uint y) noexcept { return oc_uint2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_int2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_int3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_int4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_float2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_float3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_float4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_bool2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_bool3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_bool4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uchar2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uchar3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uchar4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_ushort2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_ushort3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_ushort4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint64t2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint64t3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint64t4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint s = 0) noexcept { return oc_uint3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint x, oc_uint y, oc_uint z) noexcept { return oc_uint3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint x, oc_uint2 yz) noexcept { return oc_uint3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint2 xy, oc_uint z) noexcept { return oc_uint3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_int3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_int4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_float3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_float4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_bool3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_bool4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uchar3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uchar4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_ushort3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_ushort4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint64t3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint64t4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint s = 0) noexcept { return oc_uint4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint x, oc_uint y, oc_uint z, oc_uint w) noexcept { return oc_uint4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint x, oc_uint y, oc_uint2 zw) noexcept { return oc_uint4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint x, oc_uint2 yz, oc_uint w) noexcept { return oc_uint4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint2 xy, oc_uint z, oc_uint w) noexcept { return oc_uint4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint2 xy, oc_uint2 zw) noexcept { return oc_uint4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint x, oc_uint3 yzw) noexcept { return oc_uint4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint3 xyz, oc_uint w) noexcept { return oc_uint4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_int4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_float4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_bool4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uchar4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_ushort4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint64t4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_float s = 0) noexcept { return oc_float2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_float x, oc_float y) noexcept { return oc_float2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_int2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_int3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_int4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uint2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uint3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uint4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_float2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_float3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_float4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_bool2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_bool3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_bool4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uchar2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uchar3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uchar4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_ushort2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_ushort3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_ushort4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uint64t2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uint64t3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uint64t4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float s = 0) noexcept { return oc_float3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float x, oc_float y, oc_float z) noexcept { return oc_float3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float x, oc_float2 yz) noexcept { return oc_float3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float2 xy, oc_float z) noexcept { return oc_float3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_int3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_int4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_uint3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_uint4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_bool3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_bool4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_uchar3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_uchar4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_ushort3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_ushort4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_uint64t3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_uint64t4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float s = 0) noexcept { return oc_float4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float x, oc_float y, oc_float z, oc_float w) noexcept { return oc_float4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float x, oc_float y, oc_float2 zw) noexcept { return oc_float4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float x, oc_float2 yz, oc_float w) noexcept { return oc_float4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float2 xy, oc_float z, oc_float w) noexcept { return oc_float4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float2 xy, oc_float2 zw) noexcept { return oc_float4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float x, oc_float3 yzw) noexcept { return oc_float4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float3 xyz, oc_float w) noexcept { return oc_float4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_int4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_uint4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_bool4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_uchar4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_ushort4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_uint64t4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_bool s = 0) noexcept { return oc_bool2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_bool x, oc_bool y) noexcept { return oc_bool2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_int2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_int3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_int4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uint2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uint3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uint4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_float2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_float3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_float4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_bool2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_bool3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_bool4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uchar2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uchar3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uchar4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_ushort2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_ushort3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_ushort4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uint64t2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uint64t3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uint64t4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool s = 0) noexcept { return oc_bool3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool x, oc_bool y, oc_bool z) noexcept { return oc_bool3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool x, oc_bool2 yz) noexcept { return oc_bool3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool2 xy, oc_bool z) noexcept { return oc_bool3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_int3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_int4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_uint3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_uint4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_float3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_float4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_uchar3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_uchar4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_ushort3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_ushort4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_uint64t3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_uint64t4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool s = 0) noexcept { return oc_bool4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool x, oc_bool y, oc_bool z, oc_bool w) noexcept { return oc_bool4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool x, oc_bool y, oc_bool2 zw) noexcept { return oc_bool4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool x, oc_bool2 yz, oc_bool w) noexcept { return oc_bool4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool2 xy, oc_bool z, oc_bool w) noexcept { return oc_bool4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool2 xy, oc_bool2 zw) noexcept { return oc_bool4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool x, oc_bool3 yzw) noexcept { return oc_bool4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool3 xyz, oc_bool w) noexcept { return oc_bool4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_int4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_uint4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_float4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_uchar4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_ushort4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_uint64t4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uchar s = 0) noexcept { return oc_uchar2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uchar x, oc_uchar y) noexcept { return oc_uchar2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_int2 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_int3 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_int4 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uint2 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uint3 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uint4 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_float2 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_float3 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_float4 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_bool2 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_bool3 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_bool4 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uchar2 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uchar3 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uchar4 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_ushort2 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_ushort3 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_ushort4 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uint64t2 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uint64t3 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar2(oc_uint64t4 v) noexcept { return oc_uchar2{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_uchar s = 0) noexcept { return oc_uchar3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_uchar x, oc_uchar y, oc_uchar z) noexcept { return oc_uchar3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_uchar x, oc_uchar2 yz) noexcept { return oc_uchar3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_uchar2 xy, oc_uchar z) noexcept { return oc_uchar3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_int3 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_int4 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_uint3 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_uint4 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_float3 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_float4 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_bool3 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_bool4 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_uchar3 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_uchar4 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_ushort3 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_ushort4 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_uint64t3 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar3(oc_uint64t4 v) noexcept { return oc_uchar3{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uchar s = 0) noexcept { return oc_uchar4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uchar x, oc_uchar y, oc_uchar z, oc_uchar w) noexcept { return oc_uchar4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uchar x, oc_uchar y, oc_uchar2 zw) noexcept { return oc_uchar4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uchar x, oc_uchar2 yz, oc_uchar w) noexcept { return oc_uchar4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uchar2 xy, oc_uchar z, oc_uchar w) noexcept { return oc_uchar4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uchar2 xy, oc_uchar2 zw) noexcept { return oc_uchar4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uchar x, oc_uchar3 yzw) noexcept { return oc_uchar4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uchar3 xyz, oc_uchar w) noexcept { return oc_uchar4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_int4 v) noexcept { return oc_uchar4{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z), static_cast<oc_uchar>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uint4 v) noexcept { return oc_uchar4{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z), static_cast<oc_uchar>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_float4 v) noexcept { return oc_uchar4{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z), static_cast<oc_uchar>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_bool4 v) noexcept { return oc_uchar4{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z), static_cast<oc_uchar>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uchar4 v) noexcept { return oc_uchar4{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z), static_cast<oc_uchar>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_ushort4 v) noexcept { return oc_uchar4{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z), static_cast<oc_uchar>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uchar4(oc_uint64t4 v) noexcept { return oc_uchar4{static_cast<oc_uchar>(v.x), static_cast<oc_uchar>(v.y), static_cast<oc_uchar>(v.z), static_cast<oc_uchar>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_ushort s = 0) noexcept { return oc_ushort2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_ushort x, oc_ushort y) noexcept { return oc_ushort2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_int2 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_int3 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_int4 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_uint2 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_uint3 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_uint4 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_float2 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_float3 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_float4 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_bool2 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_bool3 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_bool4 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_uchar2 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_uchar3 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_uchar4 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_ushort2 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_ushort3 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_ushort4 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_uint64t2 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_uint64t3 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort2(oc_uint64t4 v) noexcept { return oc_ushort2{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_ushort s = 0) noexcept { return oc_ushort3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_ushort x, oc_ushort y, oc_ushort z) noexcept { return oc_ushort3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_ushort x, oc_ushort2 yz) noexcept { return oc_ushort3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_ushort2 xy, oc_ushort z) noexcept { return oc_ushort3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_int3 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_int4 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_uint3 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_uint4 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_float3 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_float4 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_bool3 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_bool4 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_uchar3 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_uchar4 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_ushort3 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_ushort4 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_uint64t3 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort3(oc_uint64t4 v) noexcept { return oc_ushort3{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_ushort s = 0) noexcept { return oc_ushort4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_ushort x, oc_ushort y, oc_ushort z, oc_ushort w) noexcept { return oc_ushort4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_ushort x, oc_ushort y, oc_ushort2 zw) noexcept { return oc_ushort4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_ushort x, oc_ushort2 yz, oc_ushort w) noexcept { return oc_ushort4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_ushort2 xy, oc_ushort z, oc_ushort w) noexcept { return oc_ushort4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_ushort2 xy, oc_ushort2 zw) noexcept { return oc_ushort4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_ushort x, oc_ushort3 yzw) noexcept { return oc_ushort4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_ushort3 xyz, oc_ushort w) noexcept { return oc_ushort4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_int4 v) noexcept { return oc_ushort4{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z), static_cast<oc_ushort>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_uint4 v) noexcept { return oc_ushort4{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z), static_cast<oc_ushort>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_float4 v) noexcept { return oc_ushort4{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z), static_cast<oc_ushort>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_bool4 v) noexcept { return oc_ushort4{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z), static_cast<oc_ushort>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_uchar4 v) noexcept { return oc_ushort4{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z), static_cast<oc_ushort>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_ushort4 v) noexcept { return oc_ushort4{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z), static_cast<oc_ushort>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_ushort4(oc_uint64t4 v) noexcept { return oc_ushort4{static_cast<oc_ushort>(v.x), static_cast<oc_ushort>(v.y), static_cast<oc_ushort>(v.z), static_cast<oc_ushort>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uint64t s = 0) noexcept { return oc_uint64t2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uint64t x, oc_uint64t y) noexcept { return oc_uint64t2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_int2 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_int3 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_int4 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uint2 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uint3 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uint4 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_float2 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_float3 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_float4 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_bool2 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_bool3 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_bool4 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uchar2 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uchar3 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uchar4 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_ushort2 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_ushort3 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_ushort4 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uint64t2 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uint64t3 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t2(oc_uint64t4 v) noexcept { return oc_uint64t2{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_uint64t s = 0) noexcept { return oc_uint64t3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_uint64t x, oc_uint64t y, oc_uint64t z) noexcept { return oc_uint64t3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_uint64t x, oc_uint64t2 yz) noexcept { return oc_uint64t3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_uint64t2 xy, oc_uint64t z) noexcept { return oc_uint64t3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_int3 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_int4 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_uint3 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_uint4 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_float3 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_float4 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_bool3 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_bool4 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_uchar3 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_uchar4 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_ushort3 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_ushort4 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_uint64t3 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t3(oc_uint64t4 v) noexcept { return oc_uint64t3{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uint64t s = 0) noexcept { return oc_uint64t4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uint64t x, oc_uint64t y, oc_uint64t z, oc_uint64t w) noexcept { return oc_uint64t4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uint64t x, oc_uint64t y, oc_uint64t2 zw) noexcept { return oc_uint64t4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uint64t x, oc_uint64t2 yz, oc_uint64t w) noexcept { return oc_uint64t4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uint64t2 xy, oc_uint64t z, oc_uint64t w) noexcept { return oc_uint64t4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uint64t2 xy, oc_uint64t2 zw) noexcept { return oc_uint64t4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uint64t x, oc_uint64t3 yzw) noexcept { return oc_uint64t4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uint64t3 xyz, oc_uint64t w) noexcept { return oc_uint64t4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_int4 v) noexcept { return oc_uint64t4{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z), static_cast<oc_uint64t>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uint4 v) noexcept { return oc_uint64t4{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z), static_cast<oc_uint64t>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_float4 v) noexcept { return oc_uint64t4{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z), static_cast<oc_uint64t>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_bool4 v) noexcept { return oc_uint64t4{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z), static_cast<oc_uint64t>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uchar4 v) noexcept { return oc_uint64t4{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z), static_cast<oc_uint64t>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_ushort4 v) noexcept { return oc_uint64t4{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z), static_cast<oc_uint64t>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint64t4(oc_uint64t4 v) noexcept { return oc_uint64t4{static_cast<oc_uint64t>(v.x), static_cast<oc_uint64t>(v.y), static_cast<oc_uint64t>(v.z), static_cast<oc_uint64t>(v.w)}; }


 
 