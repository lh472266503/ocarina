// this file was generated by generate_cuda_math_lib.py, please do not manually modify 
 
#pragma once

using oc_int = int;
using oc_uint = unsigned int;
using oc_float = float;
using oc_bool = bool;

struct alignas(8) oc_int2{
	oc_int x;
	oc_int y;

	__device__ oc_int2() noexcept 
		:x{}, y{} {}
	__device__ oc_int2(oc_int s) noexcept 
		:x(s), y(s) {}
	__device__ oc_int2(oc_int x, oc_int y) noexcept 
		:x(x), y(y) {}
	__device__ inline oc_int operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_int &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_int3{
	oc_int x;
	oc_int y;
	oc_int z;

	__device__ oc_int3() noexcept 
		:x{}, y{}, z{} {}
	__device__ oc_int3(oc_int s) noexcept 
		:x(s), y(s), z(s) {}
	__device__ oc_int3(oc_int x, oc_int y, oc_int z) noexcept 
		:x(x), y(y), z(z) {}
	__device__ inline oc_int operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_int &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_int4{
	oc_int x;
	oc_int y;
	oc_int z;
	oc_int w;

	__device__ oc_int4() noexcept 
		:x{}, y{}, z{}, w{} {}
	__device__ oc_int4(oc_int s) noexcept 
		:x(s), y(s), z(s), w(s) {}
	__device__ oc_int4(oc_int x, oc_int y, oc_int z, oc_int w) noexcept 
		:x(x), y(y), z(z), w(w) {}
	__device__ inline oc_int operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_int &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(8) oc_uint2{
	oc_uint x;
	oc_uint y;

	__device__ oc_uint2() noexcept 
		:x{}, y{} {}
	__device__ oc_uint2(oc_uint s) noexcept 
		:x(s), y(s) {}
	__device__ oc_uint2(oc_uint x, oc_uint y) noexcept 
		:x(x), y(y) {}
	__device__ inline oc_uint operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_uint &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_uint3{
	oc_uint x;
	oc_uint y;
	oc_uint z;

	__device__ oc_uint3() noexcept 
		:x{}, y{}, z{} {}
	__device__ oc_uint3(oc_uint s) noexcept 
		:x(s), y(s), z(s) {}
	__device__ oc_uint3(oc_uint x, oc_uint y, oc_uint z) noexcept 
		:x(x), y(y), z(z) {}
	__device__ inline oc_uint operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_uint &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_uint4{
	oc_uint x;
	oc_uint y;
	oc_uint z;
	oc_uint w;

	__device__ oc_uint4() noexcept 
		:x{}, y{}, z{}, w{} {}
	__device__ oc_uint4(oc_uint s) noexcept 
		:x(s), y(s), z(s), w(s) {}
	__device__ oc_uint4(oc_uint x, oc_uint y, oc_uint z, oc_uint w) noexcept 
		:x(x), y(y), z(z), w(w) {}
	__device__ inline oc_uint operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_uint &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(8) oc_float2{
	oc_float x;
	oc_float y;

	__device__ oc_float2() noexcept 
		:x{}, y{} {}
	__device__ oc_float2(oc_float s) noexcept 
		:x(s), y(s) {}
	__device__ oc_float2(oc_float x, oc_float y) noexcept 
		:x(x), y(y) {}
	__device__ inline oc_float operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_float &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_float3{
	oc_float x;
	oc_float y;
	oc_float z;

	__device__ oc_float3() noexcept 
		:x{}, y{}, z{} {}
	__device__ oc_float3(oc_float s) noexcept 
		:x(s), y(s), z(s) {}
	__device__ oc_float3(oc_float x, oc_float y, oc_float z) noexcept 
		:x(x), y(y), z(z) {}
	__device__ inline oc_float operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_float &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_float4{
	oc_float x;
	oc_float y;
	oc_float z;
	oc_float w;

	__device__ oc_float4() noexcept 
		:x{}, y{}, z{}, w{} {}
	__device__ oc_float4(oc_float s) noexcept 
		:x(s), y(s), z(s), w(s) {}
	__device__ oc_float4(oc_float x, oc_float y, oc_float z, oc_float w) noexcept 
		:x(x), y(y), z(z), w(w) {}
	__device__ inline oc_float operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_float &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(8) oc_bool2{
	oc_bool x;
	oc_bool y;

	__device__ oc_bool2() noexcept 
		:x{}, y{} {}
	__device__ oc_bool2(oc_bool s) noexcept 
		:x(s), y(s) {}
	__device__ oc_bool2(oc_bool x, oc_bool y) noexcept 
		:x(x), y(y) {}
	__device__ inline oc_bool operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_bool &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_bool3{
	oc_bool x;
	oc_bool y;
	oc_bool z;

	__device__ oc_bool3() noexcept 
		:x{}, y{}, z{} {}
	__device__ oc_bool3(oc_bool s) noexcept 
		:x(s), y(s), z(s) {}
	__device__ oc_bool3(oc_bool x, oc_bool y, oc_bool z) noexcept 
		:x(x), y(y), z(z) {}
	__device__ inline oc_bool operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_bool &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_bool4{
	oc_bool x;
	oc_bool y;
	oc_bool z;
	oc_bool w;

	__device__ oc_bool4() noexcept 
		:x{}, y{}, z{}, w{} {}
	__device__ oc_bool4(oc_bool s) noexcept 
		:x(s), y(s), z(s), w(s) {}
	__device__ oc_bool4(oc_bool x, oc_bool y, oc_bool z, oc_bool w) noexcept 
		:x(x), y(y), z(z), w(w) {}
	__device__ inline oc_bool operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ inline oc_bool &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

__device__ oc_int2 operator+(oc_int2 vec) { return oc_int2(+vec.x, +vec.y); }
__device__ oc_int2 operator-(oc_int2 vec) { return oc_int2(-vec.x, -vec.y); }
__device__ oc_int2 operator!(oc_int2 vec) { return oc_int2(!vec.x, !vec.y); }
__device__ oc_int2 operator~(oc_int2 vec) { return oc_int2(~vec.x, ~vec.y); }

__device__ oc_int3 operator+(oc_int3 vec) { return oc_int3(+vec.x, +vec.y, +vec.z); }
__device__ oc_int3 operator-(oc_int3 vec) { return oc_int3(-vec.x, -vec.y, -vec.z); }
__device__ oc_int3 operator!(oc_int3 vec) { return oc_int3(!vec.x, !vec.y, !vec.z); }
__device__ oc_int3 operator~(oc_int3 vec) { return oc_int3(~vec.x, ~vec.y, ~vec.z); }

__device__ oc_int4 operator+(oc_int4 vec) { return oc_int4(+vec.x, +vec.y, +vec.z, +vec.w); }
__device__ oc_int4 operator-(oc_int4 vec) { return oc_int4(-vec.x, -vec.y, -vec.z, -vec.w); }
__device__ oc_int4 operator!(oc_int4 vec) { return oc_int4(!vec.x, !vec.y, !vec.z, !vec.w); }
__device__ oc_int4 operator~(oc_int4 vec) { return oc_int4(~vec.x, ~vec.y, ~vec.z, ~vec.w); }

__device__ oc_uint2 operator+(oc_uint2 vec) { return oc_uint2(+vec.x, +vec.y); }
__device__ oc_uint2 operator-(oc_uint2 vec) { return oc_uint2(-vec.x, -vec.y); }
__device__ oc_uint2 operator!(oc_uint2 vec) { return oc_uint2(!vec.x, !vec.y); }
__device__ oc_uint2 operator~(oc_uint2 vec) { return oc_uint2(~vec.x, ~vec.y); }

__device__ oc_uint3 operator+(oc_uint3 vec) { return oc_uint3(+vec.x, +vec.y, +vec.z); }
__device__ oc_uint3 operator-(oc_uint3 vec) { return oc_uint3(-vec.x, -vec.y, -vec.z); }
__device__ oc_uint3 operator!(oc_uint3 vec) { return oc_uint3(!vec.x, !vec.y, !vec.z); }
__device__ oc_uint3 operator~(oc_uint3 vec) { return oc_uint3(~vec.x, ~vec.y, ~vec.z); }

__device__ oc_uint4 operator+(oc_uint4 vec) { return oc_uint4(+vec.x, +vec.y, +vec.z, +vec.w); }
__device__ oc_uint4 operator-(oc_uint4 vec) { return oc_uint4(-vec.x, -vec.y, -vec.z, -vec.w); }
__device__ oc_uint4 operator!(oc_uint4 vec) { return oc_uint4(!vec.x, !vec.y, !vec.z, !vec.w); }
__device__ oc_uint4 operator~(oc_uint4 vec) { return oc_uint4(~vec.x, ~vec.y, ~vec.z, ~vec.w); }

__device__ oc_float2 operator+(oc_float2 vec) { return oc_float2(+vec.x, +vec.y); }
__device__ oc_float2 operator-(oc_float2 vec) { return oc_float2(-vec.x, -vec.y); }
__device__ oc_float2 operator!(oc_float2 vec) { return oc_float2(!vec.x, !vec.y); }

__device__ oc_float3 operator+(oc_float3 vec) { return oc_float3(+vec.x, +vec.y, +vec.z); }
__device__ oc_float3 operator-(oc_float3 vec) { return oc_float3(-vec.x, -vec.y, -vec.z); }
__device__ oc_float3 operator!(oc_float3 vec) { return oc_float3(!vec.x, !vec.y, !vec.z); }

__device__ oc_float4 operator+(oc_float4 vec) { return oc_float4(+vec.x, +vec.y, +vec.z, +vec.w); }
__device__ oc_float4 operator-(oc_float4 vec) { return oc_float4(-vec.x, -vec.y, -vec.z, -vec.w); }
__device__ oc_float4 operator!(oc_float4 vec) { return oc_float4(!vec.x, !vec.y, !vec.z, !vec.w); }

__device__ oc_bool2 operator+(oc_bool2 vec) { return oc_bool2(+vec.x, +vec.y); }
__device__ oc_bool2 operator-(oc_bool2 vec) { return oc_bool2(-vec.x, -vec.y); }
__device__ oc_bool2 operator!(oc_bool2 vec) { return oc_bool2(!vec.x, !vec.y); }
__device__ oc_bool2 operator~(oc_bool2 vec) { return oc_bool2(~vec.x, ~vec.y); }

__device__ oc_bool3 operator+(oc_bool3 vec) { return oc_bool3(+vec.x, +vec.y, +vec.z); }
__device__ oc_bool3 operator-(oc_bool3 vec) { return oc_bool3(-vec.x, -vec.y, -vec.z); }
__device__ oc_bool3 operator!(oc_bool3 vec) { return oc_bool3(!vec.x, !vec.y, !vec.z); }
__device__ oc_bool3 operator~(oc_bool3 vec) { return oc_bool3(~vec.x, ~vec.y, ~vec.z); }

__device__ oc_bool4 operator+(oc_bool4 vec) { return oc_bool4(+vec.x, +vec.y, +vec.z, +vec.w); }
__device__ oc_bool4 operator-(oc_bool4 vec) { return oc_bool4(-vec.x, -vec.y, -vec.z, -vec.w); }
__device__ oc_bool4 operator!(oc_bool4 vec) { return oc_bool4(!vec.x, !vec.y, !vec.z, !vec.w); }
__device__ oc_bool4 operator~(oc_bool4 vec) { return oc_bool4(~vec.x, ~vec.y, ~vec.z, ~vec.w); }


__device__ oc_int2 operator+(oc_int2 lhs, oc_int2 rhs) { return oc_int2(lhs.x + rhs.x, lhs.y + rhs.y); }
__device__ oc_int2 operator+(oc_int2 lhs, oc_int rhs) { return oc_int2(lhs.x + rhs, lhs.y + rhs); }
__device__ oc_int2 operator+(oc_int lhs, oc_int2 rhs) { return oc_int2(lhs + rhs.x, lhs + rhs.y); }
__device__ oc_int2 operator-(oc_int2 lhs, oc_int2 rhs) { return oc_int2(lhs.x - rhs.x, lhs.y - rhs.y); }
__device__ oc_int2 operator-(oc_int2 lhs, oc_int rhs) { return oc_int2(lhs.x - rhs, lhs.y - rhs); }
__device__ oc_int2 operator-(oc_int lhs, oc_int2 rhs) { return oc_int2(lhs - rhs.x, lhs - rhs.y); }
__device__ oc_int2 operator*(oc_int2 lhs, oc_int2 rhs) { return oc_int2(lhs.x * rhs.x, lhs.y * rhs.y); }
__device__ oc_int2 operator*(oc_int2 lhs, oc_int rhs) { return oc_int2(lhs.x * rhs, lhs.y * rhs); }
__device__ oc_int2 operator*(oc_int lhs, oc_int2 rhs) { return oc_int2(lhs * rhs.x, lhs * rhs.y); }
__device__ oc_int2 operator/(oc_int2 lhs, oc_int2 rhs) { return oc_int2(lhs.x / rhs.x, lhs.y / rhs.y); }
__device__ oc_int2 operator/(oc_int2 lhs, oc_int rhs) { return oc_int2(lhs.x / rhs, lhs.y / rhs); }
__device__ oc_int2 operator/(oc_int lhs, oc_int2 rhs) { return oc_int2(lhs / rhs.x, lhs / rhs.y); }
__device__ oc_int2 operator%(oc_int2 lhs, oc_int2 rhs) { return oc_int2(lhs.x % rhs.x, lhs.y % rhs.y); }
__device__ oc_int2 operator%(oc_int2 lhs, oc_int rhs) { return oc_int2(lhs.x % rhs, lhs.y % rhs); }
__device__ oc_int2 operator%(oc_int lhs, oc_int2 rhs) { return oc_int2(lhs % rhs.x, lhs % rhs.y); }
__device__ oc_bool2 operator==(oc_int2 lhs, oc_int2 rhs) { return oc_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
__device__ oc_bool2 operator==(oc_int2 lhs, oc_int rhs) { return oc_bool2(lhs.x == rhs, lhs.y == rhs); }
__device__ oc_bool2 operator==(oc_int lhs, oc_int2 rhs) { return oc_bool2(lhs == rhs.x, lhs == rhs.y); }
__device__ oc_bool2 operator!=(oc_int2 lhs, oc_int2 rhs) { return oc_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
__device__ oc_bool2 operator!=(oc_int2 lhs, oc_int rhs) { return oc_bool2(lhs.x != rhs, lhs.y != rhs); }
__device__ oc_bool2 operator!=(oc_int lhs, oc_int2 rhs) { return oc_bool2(lhs != rhs.x, lhs != rhs.y); }
__device__ oc_bool2 operator>(oc_int2 lhs, oc_int2 rhs) { return oc_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
__device__ oc_bool2 operator>(oc_int2 lhs, oc_int rhs) { return oc_bool2(lhs.x > rhs, lhs.y > rhs); }
__device__ oc_bool2 operator>(oc_int lhs, oc_int2 rhs) { return oc_bool2(lhs > rhs.x, lhs > rhs.y); }
__device__ oc_bool2 operator<(oc_int2 lhs, oc_int2 rhs) { return oc_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
__device__ oc_bool2 operator<(oc_int2 lhs, oc_int rhs) { return oc_bool2(lhs.x < rhs, lhs.y < rhs); }
__device__ oc_bool2 operator<(oc_int lhs, oc_int2 rhs) { return oc_bool2(lhs < rhs.x, lhs < rhs.y); }
__device__ oc_bool2 operator>=(oc_int2 lhs, oc_int2 rhs) { return oc_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
__device__ oc_bool2 operator>=(oc_int2 lhs, oc_int rhs) { return oc_bool2(lhs.x >= rhs, lhs.y >= rhs); }
__device__ oc_bool2 operator>=(oc_int lhs, oc_int2 rhs) { return oc_bool2(lhs >= rhs.x, lhs >= rhs.y); }
__device__ oc_bool2 operator<=(oc_int2 lhs, oc_int2 rhs) { return oc_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
__device__ oc_bool2 operator<=(oc_int2 lhs, oc_int rhs) { return oc_bool2(lhs.x <= rhs, lhs.y <= rhs); }
__device__ oc_bool2 operator<=(oc_int lhs, oc_int2 rhs) { return oc_bool2(lhs <= rhs.x, lhs <= rhs.y); }
__device__ oc_bool2 operator&&(oc_int2 lhs, oc_int2 rhs) { return oc_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
__device__ oc_bool2 operator&&(oc_int2 lhs, oc_int rhs) { return oc_bool2(lhs.x && rhs, lhs.y && rhs); }
__device__ oc_bool2 operator&&(oc_int lhs, oc_int2 rhs) { return oc_bool2(lhs && rhs.x, lhs && rhs.y); }
__device__ oc_bool2 operator||(oc_int2 lhs, oc_int2 rhs) { return oc_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
__device__ oc_bool2 operator||(oc_int2 lhs, oc_int rhs) { return oc_bool2(lhs.x || rhs, lhs.y || rhs); }
__device__ oc_bool2 operator||(oc_int lhs, oc_int2 rhs) { return oc_bool2(lhs || rhs.x, lhs || rhs.y); }
__device__ oc_int2 operator&(oc_int2 lhs, oc_int2 rhs) { return oc_int2(lhs.x & rhs.x, lhs.y & rhs.y); }
__device__ oc_int2 operator&(oc_int2 lhs, oc_int rhs) { return oc_int2(lhs.x & rhs, lhs.y & rhs); }
__device__ oc_int2 operator&(oc_int lhs, oc_int2 rhs) { return oc_int2(lhs & rhs.x, lhs & rhs.y); }
__device__ oc_int2 operator|(oc_int2 lhs, oc_int2 rhs) { return oc_int2(lhs.x | rhs.x, lhs.y | rhs.y); }
__device__ oc_int2 operator|(oc_int2 lhs, oc_int rhs) { return oc_int2(lhs.x | rhs, lhs.y | rhs); }
__device__ oc_int2 operator|(oc_int lhs, oc_int2 rhs) { return oc_int2(lhs | rhs.x, lhs | rhs.y); }
__device__ oc_int2 operator^(oc_int2 lhs, oc_int2 rhs) { return oc_int2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
__device__ oc_int2 operator^(oc_int2 lhs, oc_int rhs) { return oc_int2(lhs.x ^ rhs, lhs.y ^ rhs); }
__device__ oc_int2 operator^(oc_int lhs, oc_int2 rhs) { return oc_int2(lhs ^ rhs.x, lhs ^ rhs.y); }
__device__ oc_int2 operator<<(oc_int2 lhs, oc_int2 rhs) { return oc_int2(lhs.x << rhs.x, lhs.y << rhs.y); }
__device__ oc_int2 operator<<(oc_int2 lhs, oc_int rhs) { return oc_int2(lhs.x << rhs, lhs.y << rhs); }
__device__ oc_int2 operator<<(oc_int lhs, oc_int2 rhs) { return oc_int2(lhs << rhs.x, lhs << rhs.y); }
__device__ oc_int2 operator>>(oc_int2 lhs, oc_int2 rhs) { return oc_int2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
__device__ oc_int2 operator>>(oc_int2 lhs, oc_int rhs) { return oc_int2(lhs.x >> rhs, lhs.y >> rhs); }
__device__ oc_int2 operator>>(oc_int lhs, oc_int2 rhs) { return oc_int2(lhs >> rhs.x, lhs >> rhs.y); }
__device__ oc_int3 operator+(oc_int3 lhs, oc_int3 rhs) { return oc_int3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
__device__ oc_int3 operator+(oc_int3 lhs, oc_int rhs) { return oc_int3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
__device__ oc_int3 operator+(oc_int lhs, oc_int3 rhs) { return oc_int3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
__device__ oc_int3 operator-(oc_int3 lhs, oc_int3 rhs) { return oc_int3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
__device__ oc_int3 operator-(oc_int3 lhs, oc_int rhs) { return oc_int3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
__device__ oc_int3 operator-(oc_int lhs, oc_int3 rhs) { return oc_int3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
__device__ oc_int3 operator*(oc_int3 lhs, oc_int3 rhs) { return oc_int3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
__device__ oc_int3 operator*(oc_int3 lhs, oc_int rhs) { return oc_int3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
__device__ oc_int3 operator*(oc_int lhs, oc_int3 rhs) { return oc_int3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
__device__ oc_int3 operator/(oc_int3 lhs, oc_int3 rhs) { return oc_int3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
__device__ oc_int3 operator/(oc_int3 lhs, oc_int rhs) { return oc_int3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
__device__ oc_int3 operator/(oc_int lhs, oc_int3 rhs) { return oc_int3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
__device__ oc_int3 operator%(oc_int3 lhs, oc_int3 rhs) { return oc_int3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
__device__ oc_int3 operator%(oc_int3 lhs, oc_int rhs) { return oc_int3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
__device__ oc_int3 operator%(oc_int lhs, oc_int3 rhs) { return oc_int3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
__device__ oc_bool3 operator==(oc_int3 lhs, oc_int3 rhs) { return oc_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
__device__ oc_bool3 operator==(oc_int3 lhs, oc_int rhs) { return oc_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
__device__ oc_bool3 operator==(oc_int lhs, oc_int3 rhs) { return oc_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
__device__ oc_bool3 operator!=(oc_int3 lhs, oc_int3 rhs) { return oc_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
__device__ oc_bool3 operator!=(oc_int3 lhs, oc_int rhs) { return oc_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
__device__ oc_bool3 operator!=(oc_int lhs, oc_int3 rhs) { return oc_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
__device__ oc_bool3 operator>(oc_int3 lhs, oc_int3 rhs) { return oc_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
__device__ oc_bool3 operator>(oc_int3 lhs, oc_int rhs) { return oc_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
__device__ oc_bool3 operator>(oc_int lhs, oc_int3 rhs) { return oc_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
__device__ oc_bool3 operator<(oc_int3 lhs, oc_int3 rhs) { return oc_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
__device__ oc_bool3 operator<(oc_int3 lhs, oc_int rhs) { return oc_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
__device__ oc_bool3 operator<(oc_int lhs, oc_int3 rhs) { return oc_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
__device__ oc_bool3 operator>=(oc_int3 lhs, oc_int3 rhs) { return oc_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
__device__ oc_bool3 operator>=(oc_int3 lhs, oc_int rhs) { return oc_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
__device__ oc_bool3 operator>=(oc_int lhs, oc_int3 rhs) { return oc_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
__device__ oc_bool3 operator<=(oc_int3 lhs, oc_int3 rhs) { return oc_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
__device__ oc_bool3 operator<=(oc_int3 lhs, oc_int rhs) { return oc_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
__device__ oc_bool3 operator<=(oc_int lhs, oc_int3 rhs) { return oc_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
__device__ oc_bool3 operator&&(oc_int3 lhs, oc_int3 rhs) { return oc_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
__device__ oc_bool3 operator&&(oc_int3 lhs, oc_int rhs) { return oc_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
__device__ oc_bool3 operator&&(oc_int lhs, oc_int3 rhs) { return oc_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
__device__ oc_bool3 operator||(oc_int3 lhs, oc_int3 rhs) { return oc_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
__device__ oc_bool3 operator||(oc_int3 lhs, oc_int rhs) { return oc_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
__device__ oc_bool3 operator||(oc_int lhs, oc_int3 rhs) { return oc_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
__device__ oc_int3 operator&(oc_int3 lhs, oc_int3 rhs) { return oc_int3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
__device__ oc_int3 operator&(oc_int3 lhs, oc_int rhs) { return oc_int3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
__device__ oc_int3 operator&(oc_int lhs, oc_int3 rhs) { return oc_int3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
__device__ oc_int3 operator|(oc_int3 lhs, oc_int3 rhs) { return oc_int3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
__device__ oc_int3 operator|(oc_int3 lhs, oc_int rhs) { return oc_int3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
__device__ oc_int3 operator|(oc_int lhs, oc_int3 rhs) { return oc_int3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
__device__ oc_int3 operator^(oc_int3 lhs, oc_int3 rhs) { return oc_int3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
__device__ oc_int3 operator^(oc_int3 lhs, oc_int rhs) { return oc_int3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
__device__ oc_int3 operator^(oc_int lhs, oc_int3 rhs) { return oc_int3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
__device__ oc_int3 operator<<(oc_int3 lhs, oc_int3 rhs) { return oc_int3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
__device__ oc_int3 operator<<(oc_int3 lhs, oc_int rhs) { return oc_int3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
__device__ oc_int3 operator<<(oc_int lhs, oc_int3 rhs) { return oc_int3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
__device__ oc_int3 operator>>(oc_int3 lhs, oc_int3 rhs) { return oc_int3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
__device__ oc_int3 operator>>(oc_int3 lhs, oc_int rhs) { return oc_int3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
__device__ oc_int3 operator>>(oc_int lhs, oc_int3 rhs) { return oc_int3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
__device__ oc_int4 operator+(oc_int4 lhs, oc_int4 rhs) { return oc_int4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
__device__ oc_int4 operator+(oc_int4 lhs, oc_int rhs) { return oc_int4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
__device__ oc_int4 operator+(oc_int lhs, oc_int4 rhs) { return oc_int4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
__device__ oc_int4 operator-(oc_int4 lhs, oc_int4 rhs) { return oc_int4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
__device__ oc_int4 operator-(oc_int4 lhs, oc_int rhs) { return oc_int4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
__device__ oc_int4 operator-(oc_int lhs, oc_int4 rhs) { return oc_int4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
__device__ oc_int4 operator*(oc_int4 lhs, oc_int4 rhs) { return oc_int4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
__device__ oc_int4 operator*(oc_int4 lhs, oc_int rhs) { return oc_int4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
__device__ oc_int4 operator*(oc_int lhs, oc_int4 rhs) { return oc_int4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
__device__ oc_int4 operator/(oc_int4 lhs, oc_int4 rhs) { return oc_int4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
__device__ oc_int4 operator/(oc_int4 lhs, oc_int rhs) { return oc_int4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
__device__ oc_int4 operator/(oc_int lhs, oc_int4 rhs) { return oc_int4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
__device__ oc_int4 operator%(oc_int4 lhs, oc_int4 rhs) { return oc_int4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
__device__ oc_int4 operator%(oc_int4 lhs, oc_int rhs) { return oc_int4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
__device__ oc_int4 operator%(oc_int lhs, oc_int4 rhs) { return oc_int4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
__device__ oc_bool4 operator==(oc_int4 lhs, oc_int4 rhs) { return oc_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
__device__ oc_bool4 operator==(oc_int4 lhs, oc_int rhs) { return oc_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
__device__ oc_bool4 operator==(oc_int lhs, oc_int4 rhs) { return oc_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
__device__ oc_bool4 operator!=(oc_int4 lhs, oc_int4 rhs) { return oc_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
__device__ oc_bool4 operator!=(oc_int4 lhs, oc_int rhs) { return oc_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
__device__ oc_bool4 operator!=(oc_int lhs, oc_int4 rhs) { return oc_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
__device__ oc_bool4 operator>(oc_int4 lhs, oc_int4 rhs) { return oc_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
__device__ oc_bool4 operator>(oc_int4 lhs, oc_int rhs) { return oc_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
__device__ oc_bool4 operator>(oc_int lhs, oc_int4 rhs) { return oc_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
__device__ oc_bool4 operator<(oc_int4 lhs, oc_int4 rhs) { return oc_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
__device__ oc_bool4 operator<(oc_int4 lhs, oc_int rhs) { return oc_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
__device__ oc_bool4 operator<(oc_int lhs, oc_int4 rhs) { return oc_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
__device__ oc_bool4 operator>=(oc_int4 lhs, oc_int4 rhs) { return oc_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
__device__ oc_bool4 operator>=(oc_int4 lhs, oc_int rhs) { return oc_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
__device__ oc_bool4 operator>=(oc_int lhs, oc_int4 rhs) { return oc_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
__device__ oc_bool4 operator<=(oc_int4 lhs, oc_int4 rhs) { return oc_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
__device__ oc_bool4 operator<=(oc_int4 lhs, oc_int rhs) { return oc_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
__device__ oc_bool4 operator<=(oc_int lhs, oc_int4 rhs) { return oc_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
__device__ oc_bool4 operator&&(oc_int4 lhs, oc_int4 rhs) { return oc_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
__device__ oc_bool4 operator&&(oc_int4 lhs, oc_int rhs) { return oc_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
__device__ oc_bool4 operator&&(oc_int lhs, oc_int4 rhs) { return oc_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
__device__ oc_bool4 operator||(oc_int4 lhs, oc_int4 rhs) { return oc_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
__device__ oc_bool4 operator||(oc_int4 lhs, oc_int rhs) { return oc_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
__device__ oc_bool4 operator||(oc_int lhs, oc_int4 rhs) { return oc_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
__device__ oc_int4 operator&(oc_int4 lhs, oc_int4 rhs) { return oc_int4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
__device__ oc_int4 operator&(oc_int4 lhs, oc_int rhs) { return oc_int4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
__device__ oc_int4 operator&(oc_int lhs, oc_int4 rhs) { return oc_int4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
__device__ oc_int4 operator|(oc_int4 lhs, oc_int4 rhs) { return oc_int4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
__device__ oc_int4 operator|(oc_int4 lhs, oc_int rhs) { return oc_int4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
__device__ oc_int4 operator|(oc_int lhs, oc_int4 rhs) { return oc_int4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
__device__ oc_int4 operator^(oc_int4 lhs, oc_int4 rhs) { return oc_int4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
__device__ oc_int4 operator^(oc_int4 lhs, oc_int rhs) { return oc_int4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
__device__ oc_int4 operator^(oc_int lhs, oc_int4 rhs) { return oc_int4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
__device__ oc_int4 operator<<(oc_int4 lhs, oc_int4 rhs) { return oc_int4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
__device__ oc_int4 operator<<(oc_int4 lhs, oc_int rhs) { return oc_int4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
__device__ oc_int4 operator<<(oc_int lhs, oc_int4 rhs) { return oc_int4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
__device__ oc_int4 operator>>(oc_int4 lhs, oc_int4 rhs) { return oc_int4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
__device__ oc_int4 operator>>(oc_int4 lhs, oc_int rhs) { return oc_int4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
__device__ oc_int4 operator>>(oc_int lhs, oc_int4 rhs) { return oc_int4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }

__device__ oc_uint2 operator+(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(lhs.x + rhs.x, lhs.y + rhs.y); }
__device__ oc_uint2 operator+(oc_uint2 lhs, oc_uint rhs) { return oc_uint2(lhs.x + rhs, lhs.y + rhs); }
__device__ oc_uint2 operator+(oc_uint lhs, oc_uint2 rhs) { return oc_uint2(lhs + rhs.x, lhs + rhs.y); }
__device__ oc_uint2 operator-(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(lhs.x - rhs.x, lhs.y - rhs.y); }
__device__ oc_uint2 operator-(oc_uint2 lhs, oc_uint rhs) { return oc_uint2(lhs.x - rhs, lhs.y - rhs); }
__device__ oc_uint2 operator-(oc_uint lhs, oc_uint2 rhs) { return oc_uint2(lhs - rhs.x, lhs - rhs.y); }
__device__ oc_uint2 operator*(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(lhs.x * rhs.x, lhs.y * rhs.y); }
__device__ oc_uint2 operator*(oc_uint2 lhs, oc_uint rhs) { return oc_uint2(lhs.x * rhs, lhs.y * rhs); }
__device__ oc_uint2 operator*(oc_uint lhs, oc_uint2 rhs) { return oc_uint2(lhs * rhs.x, lhs * rhs.y); }
__device__ oc_uint2 operator/(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(lhs.x / rhs.x, lhs.y / rhs.y); }
__device__ oc_uint2 operator/(oc_uint2 lhs, oc_uint rhs) { return oc_uint2(lhs.x / rhs, lhs.y / rhs); }
__device__ oc_uint2 operator/(oc_uint lhs, oc_uint2 rhs) { return oc_uint2(lhs / rhs.x, lhs / rhs.y); }
__device__ oc_uint2 operator%(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(lhs.x % rhs.x, lhs.y % rhs.y); }
__device__ oc_uint2 operator%(oc_uint2 lhs, oc_uint rhs) { return oc_uint2(lhs.x % rhs, lhs.y % rhs); }
__device__ oc_uint2 operator%(oc_uint lhs, oc_uint2 rhs) { return oc_uint2(lhs % rhs.x, lhs % rhs.y); }
__device__ oc_bool2 operator==(oc_uint2 lhs, oc_uint2 rhs) { return oc_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
__device__ oc_bool2 operator==(oc_uint2 lhs, oc_uint rhs) { return oc_bool2(lhs.x == rhs, lhs.y == rhs); }
__device__ oc_bool2 operator==(oc_uint lhs, oc_uint2 rhs) { return oc_bool2(lhs == rhs.x, lhs == rhs.y); }
__device__ oc_bool2 operator!=(oc_uint2 lhs, oc_uint2 rhs) { return oc_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
__device__ oc_bool2 operator!=(oc_uint2 lhs, oc_uint rhs) { return oc_bool2(lhs.x != rhs, lhs.y != rhs); }
__device__ oc_bool2 operator!=(oc_uint lhs, oc_uint2 rhs) { return oc_bool2(lhs != rhs.x, lhs != rhs.y); }
__device__ oc_bool2 operator>(oc_uint2 lhs, oc_uint2 rhs) { return oc_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
__device__ oc_bool2 operator>(oc_uint2 lhs, oc_uint rhs) { return oc_bool2(lhs.x > rhs, lhs.y > rhs); }
__device__ oc_bool2 operator>(oc_uint lhs, oc_uint2 rhs) { return oc_bool2(lhs > rhs.x, lhs > rhs.y); }
__device__ oc_bool2 operator<(oc_uint2 lhs, oc_uint2 rhs) { return oc_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
__device__ oc_bool2 operator<(oc_uint2 lhs, oc_uint rhs) { return oc_bool2(lhs.x < rhs, lhs.y < rhs); }
__device__ oc_bool2 operator<(oc_uint lhs, oc_uint2 rhs) { return oc_bool2(lhs < rhs.x, lhs < rhs.y); }
__device__ oc_bool2 operator>=(oc_uint2 lhs, oc_uint2 rhs) { return oc_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
__device__ oc_bool2 operator>=(oc_uint2 lhs, oc_uint rhs) { return oc_bool2(lhs.x >= rhs, lhs.y >= rhs); }
__device__ oc_bool2 operator>=(oc_uint lhs, oc_uint2 rhs) { return oc_bool2(lhs >= rhs.x, lhs >= rhs.y); }
__device__ oc_bool2 operator<=(oc_uint2 lhs, oc_uint2 rhs) { return oc_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
__device__ oc_bool2 operator<=(oc_uint2 lhs, oc_uint rhs) { return oc_bool2(lhs.x <= rhs, lhs.y <= rhs); }
__device__ oc_bool2 operator<=(oc_uint lhs, oc_uint2 rhs) { return oc_bool2(lhs <= rhs.x, lhs <= rhs.y); }
__device__ oc_bool2 operator&&(oc_uint2 lhs, oc_uint2 rhs) { return oc_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
__device__ oc_bool2 operator&&(oc_uint2 lhs, oc_uint rhs) { return oc_bool2(lhs.x && rhs, lhs.y && rhs); }
__device__ oc_bool2 operator&&(oc_uint lhs, oc_uint2 rhs) { return oc_bool2(lhs && rhs.x, lhs && rhs.y); }
__device__ oc_bool2 operator||(oc_uint2 lhs, oc_uint2 rhs) { return oc_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
__device__ oc_bool2 operator||(oc_uint2 lhs, oc_uint rhs) { return oc_bool2(lhs.x || rhs, lhs.y || rhs); }
__device__ oc_bool2 operator||(oc_uint lhs, oc_uint2 rhs) { return oc_bool2(lhs || rhs.x, lhs || rhs.y); }
__device__ oc_uint2 operator&(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(lhs.x & rhs.x, lhs.y & rhs.y); }
__device__ oc_uint2 operator&(oc_uint2 lhs, oc_uint rhs) { return oc_uint2(lhs.x & rhs, lhs.y & rhs); }
__device__ oc_uint2 operator&(oc_uint lhs, oc_uint2 rhs) { return oc_uint2(lhs & rhs.x, lhs & rhs.y); }
__device__ oc_uint2 operator|(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(lhs.x | rhs.x, lhs.y | rhs.y); }
__device__ oc_uint2 operator|(oc_uint2 lhs, oc_uint rhs) { return oc_uint2(lhs.x | rhs, lhs.y | rhs); }
__device__ oc_uint2 operator|(oc_uint lhs, oc_uint2 rhs) { return oc_uint2(lhs | rhs.x, lhs | rhs.y); }
__device__ oc_uint2 operator^(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
__device__ oc_uint2 operator^(oc_uint2 lhs, oc_uint rhs) { return oc_uint2(lhs.x ^ rhs, lhs.y ^ rhs); }
__device__ oc_uint2 operator^(oc_uint lhs, oc_uint2 rhs) { return oc_uint2(lhs ^ rhs.x, lhs ^ rhs.y); }
__device__ oc_uint2 operator<<(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(lhs.x << rhs.x, lhs.y << rhs.y); }
__device__ oc_uint2 operator<<(oc_uint2 lhs, oc_uint rhs) { return oc_uint2(lhs.x << rhs, lhs.y << rhs); }
__device__ oc_uint2 operator<<(oc_uint lhs, oc_uint2 rhs) { return oc_uint2(lhs << rhs.x, lhs << rhs.y); }
__device__ oc_uint2 operator>>(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
__device__ oc_uint2 operator>>(oc_uint2 lhs, oc_uint rhs) { return oc_uint2(lhs.x >> rhs, lhs.y >> rhs); }
__device__ oc_uint2 operator>>(oc_uint lhs, oc_uint2 rhs) { return oc_uint2(lhs >> rhs.x, lhs >> rhs.y); }
__device__ oc_uint3 operator+(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
__device__ oc_uint3 operator+(oc_uint3 lhs, oc_uint rhs) { return oc_uint3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
__device__ oc_uint3 operator+(oc_uint lhs, oc_uint3 rhs) { return oc_uint3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
__device__ oc_uint3 operator-(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
__device__ oc_uint3 operator-(oc_uint3 lhs, oc_uint rhs) { return oc_uint3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
__device__ oc_uint3 operator-(oc_uint lhs, oc_uint3 rhs) { return oc_uint3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
__device__ oc_uint3 operator*(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
__device__ oc_uint3 operator*(oc_uint3 lhs, oc_uint rhs) { return oc_uint3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
__device__ oc_uint3 operator*(oc_uint lhs, oc_uint3 rhs) { return oc_uint3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
__device__ oc_uint3 operator/(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
__device__ oc_uint3 operator/(oc_uint3 lhs, oc_uint rhs) { return oc_uint3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
__device__ oc_uint3 operator/(oc_uint lhs, oc_uint3 rhs) { return oc_uint3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
__device__ oc_uint3 operator%(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z); }
__device__ oc_uint3 operator%(oc_uint3 lhs, oc_uint rhs) { return oc_uint3(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs); }
__device__ oc_uint3 operator%(oc_uint lhs, oc_uint3 rhs) { return oc_uint3(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z); }
__device__ oc_bool3 operator==(oc_uint3 lhs, oc_uint3 rhs) { return oc_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
__device__ oc_bool3 operator==(oc_uint3 lhs, oc_uint rhs) { return oc_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
__device__ oc_bool3 operator==(oc_uint lhs, oc_uint3 rhs) { return oc_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
__device__ oc_bool3 operator!=(oc_uint3 lhs, oc_uint3 rhs) { return oc_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
__device__ oc_bool3 operator!=(oc_uint3 lhs, oc_uint rhs) { return oc_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
__device__ oc_bool3 operator!=(oc_uint lhs, oc_uint3 rhs) { return oc_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
__device__ oc_bool3 operator>(oc_uint3 lhs, oc_uint3 rhs) { return oc_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
__device__ oc_bool3 operator>(oc_uint3 lhs, oc_uint rhs) { return oc_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
__device__ oc_bool3 operator>(oc_uint lhs, oc_uint3 rhs) { return oc_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
__device__ oc_bool3 operator<(oc_uint3 lhs, oc_uint3 rhs) { return oc_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
__device__ oc_bool3 operator<(oc_uint3 lhs, oc_uint rhs) { return oc_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
__device__ oc_bool3 operator<(oc_uint lhs, oc_uint3 rhs) { return oc_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
__device__ oc_bool3 operator>=(oc_uint3 lhs, oc_uint3 rhs) { return oc_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
__device__ oc_bool3 operator>=(oc_uint3 lhs, oc_uint rhs) { return oc_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
__device__ oc_bool3 operator>=(oc_uint lhs, oc_uint3 rhs) { return oc_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
__device__ oc_bool3 operator<=(oc_uint3 lhs, oc_uint3 rhs) { return oc_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
__device__ oc_bool3 operator<=(oc_uint3 lhs, oc_uint rhs) { return oc_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
__device__ oc_bool3 operator<=(oc_uint lhs, oc_uint3 rhs) { return oc_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
__device__ oc_bool3 operator&&(oc_uint3 lhs, oc_uint3 rhs) { return oc_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
__device__ oc_bool3 operator&&(oc_uint3 lhs, oc_uint rhs) { return oc_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
__device__ oc_bool3 operator&&(oc_uint lhs, oc_uint3 rhs) { return oc_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
__device__ oc_bool3 operator||(oc_uint3 lhs, oc_uint3 rhs) { return oc_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
__device__ oc_bool3 operator||(oc_uint3 lhs, oc_uint rhs) { return oc_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
__device__ oc_bool3 operator||(oc_uint lhs, oc_uint3 rhs) { return oc_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
__device__ oc_uint3 operator&(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
__device__ oc_uint3 operator&(oc_uint3 lhs, oc_uint rhs) { return oc_uint3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
__device__ oc_uint3 operator&(oc_uint lhs, oc_uint3 rhs) { return oc_uint3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
__device__ oc_uint3 operator|(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
__device__ oc_uint3 operator|(oc_uint3 lhs, oc_uint rhs) { return oc_uint3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
__device__ oc_uint3 operator|(oc_uint lhs, oc_uint3 rhs) { return oc_uint3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
__device__ oc_uint3 operator^(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
__device__ oc_uint3 operator^(oc_uint3 lhs, oc_uint rhs) { return oc_uint3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
__device__ oc_uint3 operator^(oc_uint lhs, oc_uint3 rhs) { return oc_uint3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
__device__ oc_uint3 operator<<(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
__device__ oc_uint3 operator<<(oc_uint3 lhs, oc_uint rhs) { return oc_uint3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
__device__ oc_uint3 operator<<(oc_uint lhs, oc_uint3 rhs) { return oc_uint3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
__device__ oc_uint3 operator>>(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
__device__ oc_uint3 operator>>(oc_uint3 lhs, oc_uint rhs) { return oc_uint3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
__device__ oc_uint3 operator>>(oc_uint lhs, oc_uint3 rhs) { return oc_uint3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
__device__ oc_uint4 operator+(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
__device__ oc_uint4 operator+(oc_uint4 lhs, oc_uint rhs) { return oc_uint4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
__device__ oc_uint4 operator+(oc_uint lhs, oc_uint4 rhs) { return oc_uint4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
__device__ oc_uint4 operator-(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
__device__ oc_uint4 operator-(oc_uint4 lhs, oc_uint rhs) { return oc_uint4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
__device__ oc_uint4 operator-(oc_uint lhs, oc_uint4 rhs) { return oc_uint4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
__device__ oc_uint4 operator*(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
__device__ oc_uint4 operator*(oc_uint4 lhs, oc_uint rhs) { return oc_uint4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
__device__ oc_uint4 operator*(oc_uint lhs, oc_uint4 rhs) { return oc_uint4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
__device__ oc_uint4 operator/(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
__device__ oc_uint4 operator/(oc_uint4 lhs, oc_uint rhs) { return oc_uint4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
__device__ oc_uint4 operator/(oc_uint lhs, oc_uint4 rhs) { return oc_uint4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
__device__ oc_uint4 operator%(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(lhs.x % rhs.x, lhs.y % rhs.y, lhs.z % rhs.z, lhs.w % rhs.w); }
__device__ oc_uint4 operator%(oc_uint4 lhs, oc_uint rhs) { return oc_uint4(lhs.x % rhs, lhs.y % rhs, lhs.z % rhs, lhs.w % rhs); }
__device__ oc_uint4 operator%(oc_uint lhs, oc_uint4 rhs) { return oc_uint4(lhs % rhs.x, lhs % rhs.y, lhs % rhs.z, lhs % rhs.w); }
__device__ oc_bool4 operator==(oc_uint4 lhs, oc_uint4 rhs) { return oc_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
__device__ oc_bool4 operator==(oc_uint4 lhs, oc_uint rhs) { return oc_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
__device__ oc_bool4 operator==(oc_uint lhs, oc_uint4 rhs) { return oc_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
__device__ oc_bool4 operator!=(oc_uint4 lhs, oc_uint4 rhs) { return oc_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
__device__ oc_bool4 operator!=(oc_uint4 lhs, oc_uint rhs) { return oc_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
__device__ oc_bool4 operator!=(oc_uint lhs, oc_uint4 rhs) { return oc_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
__device__ oc_bool4 operator>(oc_uint4 lhs, oc_uint4 rhs) { return oc_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
__device__ oc_bool4 operator>(oc_uint4 lhs, oc_uint rhs) { return oc_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
__device__ oc_bool4 operator>(oc_uint lhs, oc_uint4 rhs) { return oc_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
__device__ oc_bool4 operator<(oc_uint4 lhs, oc_uint4 rhs) { return oc_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
__device__ oc_bool4 operator<(oc_uint4 lhs, oc_uint rhs) { return oc_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
__device__ oc_bool4 operator<(oc_uint lhs, oc_uint4 rhs) { return oc_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
__device__ oc_bool4 operator>=(oc_uint4 lhs, oc_uint4 rhs) { return oc_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
__device__ oc_bool4 operator>=(oc_uint4 lhs, oc_uint rhs) { return oc_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
__device__ oc_bool4 operator>=(oc_uint lhs, oc_uint4 rhs) { return oc_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
__device__ oc_bool4 operator<=(oc_uint4 lhs, oc_uint4 rhs) { return oc_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
__device__ oc_bool4 operator<=(oc_uint4 lhs, oc_uint rhs) { return oc_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
__device__ oc_bool4 operator<=(oc_uint lhs, oc_uint4 rhs) { return oc_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
__device__ oc_bool4 operator&&(oc_uint4 lhs, oc_uint4 rhs) { return oc_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
__device__ oc_bool4 operator&&(oc_uint4 lhs, oc_uint rhs) { return oc_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
__device__ oc_bool4 operator&&(oc_uint lhs, oc_uint4 rhs) { return oc_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
__device__ oc_bool4 operator||(oc_uint4 lhs, oc_uint4 rhs) { return oc_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
__device__ oc_bool4 operator||(oc_uint4 lhs, oc_uint rhs) { return oc_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
__device__ oc_bool4 operator||(oc_uint lhs, oc_uint4 rhs) { return oc_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
__device__ oc_uint4 operator&(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
__device__ oc_uint4 operator&(oc_uint4 lhs, oc_uint rhs) { return oc_uint4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
__device__ oc_uint4 operator&(oc_uint lhs, oc_uint4 rhs) { return oc_uint4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
__device__ oc_uint4 operator|(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
__device__ oc_uint4 operator|(oc_uint4 lhs, oc_uint rhs) { return oc_uint4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
__device__ oc_uint4 operator|(oc_uint lhs, oc_uint4 rhs) { return oc_uint4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
__device__ oc_uint4 operator^(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
__device__ oc_uint4 operator^(oc_uint4 lhs, oc_uint rhs) { return oc_uint4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
__device__ oc_uint4 operator^(oc_uint lhs, oc_uint4 rhs) { return oc_uint4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
__device__ oc_uint4 operator<<(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
__device__ oc_uint4 operator<<(oc_uint4 lhs, oc_uint rhs) { return oc_uint4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
__device__ oc_uint4 operator<<(oc_uint lhs, oc_uint4 rhs) { return oc_uint4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
__device__ oc_uint4 operator>>(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
__device__ oc_uint4 operator>>(oc_uint4 lhs, oc_uint rhs) { return oc_uint4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
__device__ oc_uint4 operator>>(oc_uint lhs, oc_uint4 rhs) { return oc_uint4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }

__device__ oc_float2 operator+(oc_float2 lhs, oc_float2 rhs) { return oc_float2(lhs.x + rhs.x, lhs.y + rhs.y); }
__device__ oc_float2 operator+(oc_float2 lhs, oc_float rhs) { return oc_float2(lhs.x + rhs, lhs.y + rhs); }
__device__ oc_float2 operator+(oc_float lhs, oc_float2 rhs) { return oc_float2(lhs + rhs.x, lhs + rhs.y); }
__device__ oc_float2 operator-(oc_float2 lhs, oc_float2 rhs) { return oc_float2(lhs.x - rhs.x, lhs.y - rhs.y); }
__device__ oc_float2 operator-(oc_float2 lhs, oc_float rhs) { return oc_float2(lhs.x - rhs, lhs.y - rhs); }
__device__ oc_float2 operator-(oc_float lhs, oc_float2 rhs) { return oc_float2(lhs - rhs.x, lhs - rhs.y); }
__device__ oc_float2 operator*(oc_float2 lhs, oc_float2 rhs) { return oc_float2(lhs.x * rhs.x, lhs.y * rhs.y); }
__device__ oc_float2 operator*(oc_float2 lhs, oc_float rhs) { return oc_float2(lhs.x * rhs, lhs.y * rhs); }
__device__ oc_float2 operator*(oc_float lhs, oc_float2 rhs) { return oc_float2(lhs * rhs.x, lhs * rhs.y); }
__device__ oc_float2 operator/(oc_float2 lhs, oc_float2 rhs) { return oc_float2(lhs.x / rhs.x, lhs.y / rhs.y); }
__device__ oc_float2 operator/(oc_float2 lhs, oc_float rhs) { return oc_float2(lhs.x / rhs, lhs.y / rhs); }
__device__ oc_float2 operator/(oc_float lhs, oc_float2 rhs) { return oc_float2(lhs / rhs.x, lhs / rhs.y); }
__device__ oc_bool2 operator==(oc_float2 lhs, oc_float2 rhs) { return oc_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
__device__ oc_bool2 operator==(oc_float2 lhs, oc_float rhs) { return oc_bool2(lhs.x == rhs, lhs.y == rhs); }
__device__ oc_bool2 operator==(oc_float lhs, oc_float2 rhs) { return oc_bool2(lhs == rhs.x, lhs == rhs.y); }
__device__ oc_bool2 operator!=(oc_float2 lhs, oc_float2 rhs) { return oc_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
__device__ oc_bool2 operator!=(oc_float2 lhs, oc_float rhs) { return oc_bool2(lhs.x != rhs, lhs.y != rhs); }
__device__ oc_bool2 operator!=(oc_float lhs, oc_float2 rhs) { return oc_bool2(lhs != rhs.x, lhs != rhs.y); }
__device__ oc_bool2 operator>(oc_float2 lhs, oc_float2 rhs) { return oc_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
__device__ oc_bool2 operator>(oc_float2 lhs, oc_float rhs) { return oc_bool2(lhs.x > rhs, lhs.y > rhs); }
__device__ oc_bool2 operator>(oc_float lhs, oc_float2 rhs) { return oc_bool2(lhs > rhs.x, lhs > rhs.y); }
__device__ oc_bool2 operator<(oc_float2 lhs, oc_float2 rhs) { return oc_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
__device__ oc_bool2 operator<(oc_float2 lhs, oc_float rhs) { return oc_bool2(lhs.x < rhs, lhs.y < rhs); }
__device__ oc_bool2 operator<(oc_float lhs, oc_float2 rhs) { return oc_bool2(lhs < rhs.x, lhs < rhs.y); }
__device__ oc_bool2 operator>=(oc_float2 lhs, oc_float2 rhs) { return oc_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
__device__ oc_bool2 operator>=(oc_float2 lhs, oc_float rhs) { return oc_bool2(lhs.x >= rhs, lhs.y >= rhs); }
__device__ oc_bool2 operator>=(oc_float lhs, oc_float2 rhs) { return oc_bool2(lhs >= rhs.x, lhs >= rhs.y); }
__device__ oc_bool2 operator<=(oc_float2 lhs, oc_float2 rhs) { return oc_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
__device__ oc_bool2 operator<=(oc_float2 lhs, oc_float rhs) { return oc_bool2(lhs.x <= rhs, lhs.y <= rhs); }
__device__ oc_bool2 operator<=(oc_float lhs, oc_float2 rhs) { return oc_bool2(lhs <= rhs.x, lhs <= rhs.y); }
__device__ oc_bool2 operator&&(oc_float2 lhs, oc_float2 rhs) { return oc_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
__device__ oc_bool2 operator&&(oc_float2 lhs, oc_float rhs) { return oc_bool2(lhs.x && rhs, lhs.y && rhs); }
__device__ oc_bool2 operator&&(oc_float lhs, oc_float2 rhs) { return oc_bool2(lhs && rhs.x, lhs && rhs.y); }
__device__ oc_bool2 operator||(oc_float2 lhs, oc_float2 rhs) { return oc_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
__device__ oc_bool2 operator||(oc_float2 lhs, oc_float rhs) { return oc_bool2(lhs.x || rhs, lhs.y || rhs); }
__device__ oc_bool2 operator||(oc_float lhs, oc_float2 rhs) { return oc_bool2(lhs || rhs.x, lhs || rhs.y); }
__device__ oc_float3 operator+(oc_float3 lhs, oc_float3 rhs) { return oc_float3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); }
__device__ oc_float3 operator+(oc_float3 lhs, oc_float rhs) { return oc_float3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); }
__device__ oc_float3 operator+(oc_float lhs, oc_float3 rhs) { return oc_float3(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z); }
__device__ oc_float3 operator-(oc_float3 lhs, oc_float3 rhs) { return oc_float3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); }
__device__ oc_float3 operator-(oc_float3 lhs, oc_float rhs) { return oc_float3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); }
__device__ oc_float3 operator-(oc_float lhs, oc_float3 rhs) { return oc_float3(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z); }
__device__ oc_float3 operator*(oc_float3 lhs, oc_float3 rhs) { return oc_float3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); }
__device__ oc_float3 operator*(oc_float3 lhs, oc_float rhs) { return oc_float3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); }
__device__ oc_float3 operator*(oc_float lhs, oc_float3 rhs) { return oc_float3(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z); }
__device__ oc_float3 operator/(oc_float3 lhs, oc_float3 rhs) { return oc_float3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); }
__device__ oc_float3 operator/(oc_float3 lhs, oc_float rhs) { return oc_float3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); }
__device__ oc_float3 operator/(oc_float lhs, oc_float3 rhs) { return oc_float3(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z); }
__device__ oc_bool3 operator==(oc_float3 lhs, oc_float3 rhs) { return oc_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
__device__ oc_bool3 operator==(oc_float3 lhs, oc_float rhs) { return oc_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
__device__ oc_bool3 operator==(oc_float lhs, oc_float3 rhs) { return oc_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
__device__ oc_bool3 operator!=(oc_float3 lhs, oc_float3 rhs) { return oc_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
__device__ oc_bool3 operator!=(oc_float3 lhs, oc_float rhs) { return oc_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
__device__ oc_bool3 operator!=(oc_float lhs, oc_float3 rhs) { return oc_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
__device__ oc_bool3 operator>(oc_float3 lhs, oc_float3 rhs) { return oc_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
__device__ oc_bool3 operator>(oc_float3 lhs, oc_float rhs) { return oc_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
__device__ oc_bool3 operator>(oc_float lhs, oc_float3 rhs) { return oc_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
__device__ oc_bool3 operator<(oc_float3 lhs, oc_float3 rhs) { return oc_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
__device__ oc_bool3 operator<(oc_float3 lhs, oc_float rhs) { return oc_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
__device__ oc_bool3 operator<(oc_float lhs, oc_float3 rhs) { return oc_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
__device__ oc_bool3 operator>=(oc_float3 lhs, oc_float3 rhs) { return oc_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
__device__ oc_bool3 operator>=(oc_float3 lhs, oc_float rhs) { return oc_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
__device__ oc_bool3 operator>=(oc_float lhs, oc_float3 rhs) { return oc_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
__device__ oc_bool3 operator<=(oc_float3 lhs, oc_float3 rhs) { return oc_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
__device__ oc_bool3 operator<=(oc_float3 lhs, oc_float rhs) { return oc_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
__device__ oc_bool3 operator<=(oc_float lhs, oc_float3 rhs) { return oc_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
__device__ oc_bool3 operator&&(oc_float3 lhs, oc_float3 rhs) { return oc_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
__device__ oc_bool3 operator&&(oc_float3 lhs, oc_float rhs) { return oc_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
__device__ oc_bool3 operator&&(oc_float lhs, oc_float3 rhs) { return oc_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
__device__ oc_bool3 operator||(oc_float3 lhs, oc_float3 rhs) { return oc_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
__device__ oc_bool3 operator||(oc_float3 lhs, oc_float rhs) { return oc_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
__device__ oc_bool3 operator||(oc_float lhs, oc_float3 rhs) { return oc_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
__device__ oc_float4 operator+(oc_float4 lhs, oc_float4 rhs) { return oc_float4(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z, lhs.w + rhs.w); }
__device__ oc_float4 operator+(oc_float4 lhs, oc_float rhs) { return oc_float4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); }
__device__ oc_float4 operator+(oc_float lhs, oc_float4 rhs) { return oc_float4(lhs + rhs.x, lhs + rhs.y, lhs + rhs.z, lhs + rhs.w); }
__device__ oc_float4 operator-(oc_float4 lhs, oc_float4 rhs) { return oc_float4(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z, lhs.w - rhs.w); }
__device__ oc_float4 operator-(oc_float4 lhs, oc_float rhs) { return oc_float4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); }
__device__ oc_float4 operator-(oc_float lhs, oc_float4 rhs) { return oc_float4(lhs - rhs.x, lhs - rhs.y, lhs - rhs.z, lhs - rhs.w); }
__device__ oc_float4 operator*(oc_float4 lhs, oc_float4 rhs) { return oc_float4(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z, lhs.w * rhs.w); }
__device__ oc_float4 operator*(oc_float4 lhs, oc_float rhs) { return oc_float4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); }
__device__ oc_float4 operator*(oc_float lhs, oc_float4 rhs) { return oc_float4(lhs * rhs.x, lhs * rhs.y, lhs * rhs.z, lhs * rhs.w); }
__device__ oc_float4 operator/(oc_float4 lhs, oc_float4 rhs) { return oc_float4(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z, lhs.w / rhs.w); }
__device__ oc_float4 operator/(oc_float4 lhs, oc_float rhs) { return oc_float4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); }
__device__ oc_float4 operator/(oc_float lhs, oc_float4 rhs) { return oc_float4(lhs / rhs.x, lhs / rhs.y, lhs / rhs.z, lhs / rhs.w); }
__device__ oc_bool4 operator==(oc_float4 lhs, oc_float4 rhs) { return oc_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
__device__ oc_bool4 operator==(oc_float4 lhs, oc_float rhs) { return oc_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
__device__ oc_bool4 operator==(oc_float lhs, oc_float4 rhs) { return oc_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
__device__ oc_bool4 operator!=(oc_float4 lhs, oc_float4 rhs) { return oc_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
__device__ oc_bool4 operator!=(oc_float4 lhs, oc_float rhs) { return oc_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
__device__ oc_bool4 operator!=(oc_float lhs, oc_float4 rhs) { return oc_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
__device__ oc_bool4 operator>(oc_float4 lhs, oc_float4 rhs) { return oc_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
__device__ oc_bool4 operator>(oc_float4 lhs, oc_float rhs) { return oc_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
__device__ oc_bool4 operator>(oc_float lhs, oc_float4 rhs) { return oc_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
__device__ oc_bool4 operator<(oc_float4 lhs, oc_float4 rhs) { return oc_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
__device__ oc_bool4 operator<(oc_float4 lhs, oc_float rhs) { return oc_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
__device__ oc_bool4 operator<(oc_float lhs, oc_float4 rhs) { return oc_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
__device__ oc_bool4 operator>=(oc_float4 lhs, oc_float4 rhs) { return oc_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
__device__ oc_bool4 operator>=(oc_float4 lhs, oc_float rhs) { return oc_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
__device__ oc_bool4 operator>=(oc_float lhs, oc_float4 rhs) { return oc_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
__device__ oc_bool4 operator<=(oc_float4 lhs, oc_float4 rhs) { return oc_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
__device__ oc_bool4 operator<=(oc_float4 lhs, oc_float rhs) { return oc_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
__device__ oc_bool4 operator<=(oc_float lhs, oc_float4 rhs) { return oc_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
__device__ oc_bool4 operator&&(oc_float4 lhs, oc_float4 rhs) { return oc_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
__device__ oc_bool4 operator&&(oc_float4 lhs, oc_float rhs) { return oc_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
__device__ oc_bool4 operator&&(oc_float lhs, oc_float4 rhs) { return oc_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
__device__ oc_bool4 operator||(oc_float4 lhs, oc_float4 rhs) { return oc_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
__device__ oc_bool4 operator||(oc_float4 lhs, oc_float rhs) { return oc_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
__device__ oc_bool4 operator||(oc_float lhs, oc_float4 rhs) { return oc_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }

__device__ oc_bool2 operator==(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x == rhs.x, lhs.y == rhs.y); }
__device__ oc_bool2 operator==(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x == rhs, lhs.y == rhs); }
__device__ oc_bool2 operator==(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs == rhs.x, lhs == rhs.y); }
__device__ oc_bool2 operator!=(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x != rhs.x, lhs.y != rhs.y); }
__device__ oc_bool2 operator!=(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x != rhs, lhs.y != rhs); }
__device__ oc_bool2 operator!=(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs != rhs.x, lhs != rhs.y); }
__device__ oc_bool2 operator>(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x > rhs.x, lhs.y > rhs.y); }
__device__ oc_bool2 operator>(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x > rhs, lhs.y > rhs); }
__device__ oc_bool2 operator>(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs > rhs.x, lhs > rhs.y); }
__device__ oc_bool2 operator<(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x < rhs.x, lhs.y < rhs.y); }
__device__ oc_bool2 operator<(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x < rhs, lhs.y < rhs); }
__device__ oc_bool2 operator<(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs < rhs.x, lhs < rhs.y); }
__device__ oc_bool2 operator>=(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x >= rhs.x, lhs.y >= rhs.y); }
__device__ oc_bool2 operator>=(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x >= rhs, lhs.y >= rhs); }
__device__ oc_bool2 operator>=(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs >= rhs.x, lhs >= rhs.y); }
__device__ oc_bool2 operator<=(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x <= rhs.x, lhs.y <= rhs.y); }
__device__ oc_bool2 operator<=(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x <= rhs, lhs.y <= rhs); }
__device__ oc_bool2 operator<=(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs <= rhs.x, lhs <= rhs.y); }
__device__ oc_bool2 operator&&(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x && rhs.x, lhs.y && rhs.y); }
__device__ oc_bool2 operator&&(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x && rhs, lhs.y && rhs); }
__device__ oc_bool2 operator&&(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs && rhs.x, lhs && rhs.y); }
__device__ oc_bool2 operator||(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x || rhs.x, lhs.y || rhs.y); }
__device__ oc_bool2 operator||(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x || rhs, lhs.y || rhs); }
__device__ oc_bool2 operator||(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs || rhs.x, lhs || rhs.y); }
__device__ oc_bool2 operator&(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x & rhs.x, lhs.y & rhs.y); }
__device__ oc_bool2 operator&(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x & rhs, lhs.y & rhs); }
__device__ oc_bool2 operator&(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs & rhs.x, lhs & rhs.y); }
__device__ oc_bool2 operator|(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x | rhs.x, lhs.y | rhs.y); }
__device__ oc_bool2 operator|(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x | rhs, lhs.y | rhs); }
__device__ oc_bool2 operator|(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs | rhs.x, lhs | rhs.y); }
__device__ oc_bool2 operator^(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x ^ rhs.x, lhs.y ^ rhs.y); }
__device__ oc_bool2 operator^(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x ^ rhs, lhs.y ^ rhs); }
__device__ oc_bool2 operator^(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs ^ rhs.x, lhs ^ rhs.y); }
__device__ oc_bool2 operator<<(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x << rhs.x, lhs.y << rhs.y); }
__device__ oc_bool2 operator<<(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x << rhs, lhs.y << rhs); }
__device__ oc_bool2 operator<<(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs << rhs.x, lhs << rhs.y); }
__device__ oc_bool2 operator>>(oc_bool2 lhs, oc_bool2 rhs) { return oc_bool2(lhs.x >> rhs.x, lhs.y >> rhs.y); }
__device__ oc_bool2 operator>>(oc_bool2 lhs, oc_bool rhs) { return oc_bool2(lhs.x >> rhs, lhs.y >> rhs); }
__device__ oc_bool2 operator>>(oc_bool lhs, oc_bool2 rhs) { return oc_bool2(lhs >> rhs.x, lhs >> rhs.y); }
__device__ oc_bool3 operator==(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z); }
__device__ oc_bool3 operator==(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs); }
__device__ oc_bool3 operator==(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z); }
__device__ oc_bool3 operator!=(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z); }
__device__ oc_bool3 operator!=(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs); }
__device__ oc_bool3 operator!=(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z); }
__device__ oc_bool3 operator>(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z); }
__device__ oc_bool3 operator>(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs); }
__device__ oc_bool3 operator>(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z); }
__device__ oc_bool3 operator<(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z); }
__device__ oc_bool3 operator<(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs); }
__device__ oc_bool3 operator<(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z); }
__device__ oc_bool3 operator>=(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z); }
__device__ oc_bool3 operator>=(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs); }
__device__ oc_bool3 operator>=(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z); }
__device__ oc_bool3 operator<=(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z); }
__device__ oc_bool3 operator<=(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs); }
__device__ oc_bool3 operator<=(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z); }
__device__ oc_bool3 operator&&(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z); }
__device__ oc_bool3 operator&&(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs); }
__device__ oc_bool3 operator&&(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z); }
__device__ oc_bool3 operator||(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z); }
__device__ oc_bool3 operator||(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs); }
__device__ oc_bool3 operator||(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z); }
__device__ oc_bool3 operator&(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z); }
__device__ oc_bool3 operator&(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs); }
__device__ oc_bool3 operator&(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z); }
__device__ oc_bool3 operator|(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z); }
__device__ oc_bool3 operator|(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs); }
__device__ oc_bool3 operator|(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z); }
__device__ oc_bool3 operator^(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z); }
__device__ oc_bool3 operator^(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs); }
__device__ oc_bool3 operator^(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z); }
__device__ oc_bool3 operator<<(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z); }
__device__ oc_bool3 operator<<(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs); }
__device__ oc_bool3 operator<<(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z); }
__device__ oc_bool3 operator>>(oc_bool3 lhs, oc_bool3 rhs) { return oc_bool3(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z); }
__device__ oc_bool3 operator>>(oc_bool3 lhs, oc_bool rhs) { return oc_bool3(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs); }
__device__ oc_bool3 operator>>(oc_bool lhs, oc_bool3 rhs) { return oc_bool3(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z); }
__device__ oc_bool4 operator==(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x == rhs.x, lhs.y == rhs.y, lhs.z == rhs.z, lhs.w == rhs.w); }
__device__ oc_bool4 operator==(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x == rhs, lhs.y == rhs, lhs.z == rhs, lhs.w == rhs); }
__device__ oc_bool4 operator==(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs == rhs.x, lhs == rhs.y, lhs == rhs.z, lhs == rhs.w); }
__device__ oc_bool4 operator!=(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x != rhs.x, lhs.y != rhs.y, lhs.z != rhs.z, lhs.w != rhs.w); }
__device__ oc_bool4 operator!=(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x != rhs, lhs.y != rhs, lhs.z != rhs, lhs.w != rhs); }
__device__ oc_bool4 operator!=(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs != rhs.x, lhs != rhs.y, lhs != rhs.z, lhs != rhs.w); }
__device__ oc_bool4 operator>(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x > rhs.x, lhs.y > rhs.y, lhs.z > rhs.z, lhs.w > rhs.w); }
__device__ oc_bool4 operator>(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x > rhs, lhs.y > rhs, lhs.z > rhs, lhs.w > rhs); }
__device__ oc_bool4 operator>(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs > rhs.x, lhs > rhs.y, lhs > rhs.z, lhs > rhs.w); }
__device__ oc_bool4 operator<(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x < rhs.x, lhs.y < rhs.y, lhs.z < rhs.z, lhs.w < rhs.w); }
__device__ oc_bool4 operator<(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x < rhs, lhs.y < rhs, lhs.z < rhs, lhs.w < rhs); }
__device__ oc_bool4 operator<(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs < rhs.x, lhs < rhs.y, lhs < rhs.z, lhs < rhs.w); }
__device__ oc_bool4 operator>=(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x >= rhs.x, lhs.y >= rhs.y, lhs.z >= rhs.z, lhs.w >= rhs.w); }
__device__ oc_bool4 operator>=(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x >= rhs, lhs.y >= rhs, lhs.z >= rhs, lhs.w >= rhs); }
__device__ oc_bool4 operator>=(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs >= rhs.x, lhs >= rhs.y, lhs >= rhs.z, lhs >= rhs.w); }
__device__ oc_bool4 operator<=(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x <= rhs.x, lhs.y <= rhs.y, lhs.z <= rhs.z, lhs.w <= rhs.w); }
__device__ oc_bool4 operator<=(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x <= rhs, lhs.y <= rhs, lhs.z <= rhs, lhs.w <= rhs); }
__device__ oc_bool4 operator<=(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs <= rhs.x, lhs <= rhs.y, lhs <= rhs.z, lhs <= rhs.w); }
__device__ oc_bool4 operator&&(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x && rhs.x, lhs.y && rhs.y, lhs.z && rhs.z, lhs.w && rhs.w); }
__device__ oc_bool4 operator&&(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x && rhs, lhs.y && rhs, lhs.z && rhs, lhs.w && rhs); }
__device__ oc_bool4 operator&&(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs && rhs.x, lhs && rhs.y, lhs && rhs.z, lhs && rhs.w); }
__device__ oc_bool4 operator||(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x || rhs.x, lhs.y || rhs.y, lhs.z || rhs.z, lhs.w || rhs.w); }
__device__ oc_bool4 operator||(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x || rhs, lhs.y || rhs, lhs.z || rhs, lhs.w || rhs); }
__device__ oc_bool4 operator||(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs || rhs.x, lhs || rhs.y, lhs || rhs.z, lhs || rhs.w); }
__device__ oc_bool4 operator&(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x & rhs.x, lhs.y & rhs.y, lhs.z & rhs.z, lhs.w & rhs.w); }
__device__ oc_bool4 operator&(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x & rhs, lhs.y & rhs, lhs.z & rhs, lhs.w & rhs); }
__device__ oc_bool4 operator&(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs & rhs.x, lhs & rhs.y, lhs & rhs.z, lhs & rhs.w); }
__device__ oc_bool4 operator|(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x | rhs.x, lhs.y | rhs.y, lhs.z | rhs.z, lhs.w | rhs.w); }
__device__ oc_bool4 operator|(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x | rhs, lhs.y | rhs, lhs.z | rhs, lhs.w | rhs); }
__device__ oc_bool4 operator|(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs | rhs.x, lhs | rhs.y, lhs | rhs.z, lhs | rhs.w); }
__device__ oc_bool4 operator^(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x ^ rhs.x, lhs.y ^ rhs.y, lhs.z ^ rhs.z, lhs.w ^ rhs.w); }
__device__ oc_bool4 operator^(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x ^ rhs, lhs.y ^ rhs, lhs.z ^ rhs, lhs.w ^ rhs); }
__device__ oc_bool4 operator^(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs ^ rhs.x, lhs ^ rhs.y, lhs ^ rhs.z, lhs ^ rhs.w); }
__device__ oc_bool4 operator<<(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x << rhs.x, lhs.y << rhs.y, lhs.z << rhs.z, lhs.w << rhs.w); }
__device__ oc_bool4 operator<<(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x << rhs, lhs.y << rhs, lhs.z << rhs, lhs.w << rhs); }
__device__ oc_bool4 operator<<(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs << rhs.x, lhs << rhs.y, lhs << rhs.z, lhs << rhs.w); }
__device__ oc_bool4 operator>>(oc_bool4 lhs, oc_bool4 rhs) { return oc_bool4(lhs.x >> rhs.x, lhs.y >> rhs.y, lhs.z >> rhs.z, lhs.w >> rhs.w); }
__device__ oc_bool4 operator>>(oc_bool4 lhs, oc_bool rhs) { return oc_bool4(lhs.x >> rhs, lhs.y >> rhs, lhs.z >> rhs, lhs.w >> rhs); }
__device__ oc_bool4 operator>>(oc_bool lhs, oc_bool4 rhs) { return oc_bool4(lhs >> rhs.x, lhs >> rhs.y, lhs >> rhs.z, lhs >> rhs.w); }

__device__ oc_int2& operator+=(oc_int2 &lhs, oc_int2 rhs) { lhs = lhs + rhs; return lhs; }
__device__ oc_int2& operator-=(oc_int2 &lhs, oc_int2 rhs) { lhs = lhs - rhs; return lhs; }
__device__ oc_int2& operator*=(oc_int2 &lhs, oc_int2 rhs) { lhs = lhs * rhs; return lhs; }
__device__ oc_int2& operator/=(oc_int2 &lhs, oc_int2 rhs) { lhs = lhs / rhs; return lhs; }
__device__ oc_int2& operator%=(oc_int2 &lhs, oc_int2 rhs) { lhs = lhs % rhs; return lhs; }
__device__ oc_int3& operator+=(oc_int3 &lhs, oc_int3 rhs) { lhs = lhs + rhs; return lhs; }
__device__ oc_int3& operator-=(oc_int3 &lhs, oc_int3 rhs) { lhs = lhs - rhs; return lhs; }
__device__ oc_int3& operator*=(oc_int3 &lhs, oc_int3 rhs) { lhs = lhs * rhs; return lhs; }
__device__ oc_int3& operator/=(oc_int3 &lhs, oc_int3 rhs) { lhs = lhs / rhs; return lhs; }
__device__ oc_int3& operator%=(oc_int3 &lhs, oc_int3 rhs) { lhs = lhs % rhs; return lhs; }
__device__ oc_int4& operator+=(oc_int4 &lhs, oc_int4 rhs) { lhs = lhs + rhs; return lhs; }
__device__ oc_int4& operator-=(oc_int4 &lhs, oc_int4 rhs) { lhs = lhs - rhs; return lhs; }
__device__ oc_int4& operator*=(oc_int4 &lhs, oc_int4 rhs) { lhs = lhs * rhs; return lhs; }
__device__ oc_int4& operator/=(oc_int4 &lhs, oc_int4 rhs) { lhs = lhs / rhs; return lhs; }
__device__ oc_int4& operator%=(oc_int4 &lhs, oc_int4 rhs) { lhs = lhs % rhs; return lhs; }

__device__ oc_uint2& operator+=(oc_uint2 &lhs, oc_uint2 rhs) { lhs = lhs + rhs; return lhs; }
__device__ oc_uint2& operator-=(oc_uint2 &lhs, oc_uint2 rhs) { lhs = lhs - rhs; return lhs; }
__device__ oc_uint2& operator*=(oc_uint2 &lhs, oc_uint2 rhs) { lhs = lhs * rhs; return lhs; }
__device__ oc_uint2& operator/=(oc_uint2 &lhs, oc_uint2 rhs) { lhs = lhs / rhs; return lhs; }
__device__ oc_uint2& operator%=(oc_uint2 &lhs, oc_uint2 rhs) { lhs = lhs % rhs; return lhs; }
__device__ oc_uint3& operator+=(oc_uint3 &lhs, oc_uint3 rhs) { lhs = lhs + rhs; return lhs; }
__device__ oc_uint3& operator-=(oc_uint3 &lhs, oc_uint3 rhs) { lhs = lhs - rhs; return lhs; }
__device__ oc_uint3& operator*=(oc_uint3 &lhs, oc_uint3 rhs) { lhs = lhs * rhs; return lhs; }
__device__ oc_uint3& operator/=(oc_uint3 &lhs, oc_uint3 rhs) { lhs = lhs / rhs; return lhs; }
__device__ oc_uint3& operator%=(oc_uint3 &lhs, oc_uint3 rhs) { lhs = lhs % rhs; return lhs; }
__device__ oc_uint4& operator+=(oc_uint4 &lhs, oc_uint4 rhs) { lhs = lhs + rhs; return lhs; }
__device__ oc_uint4& operator-=(oc_uint4 &lhs, oc_uint4 rhs) { lhs = lhs - rhs; return lhs; }
__device__ oc_uint4& operator*=(oc_uint4 &lhs, oc_uint4 rhs) { lhs = lhs * rhs; return lhs; }
__device__ oc_uint4& operator/=(oc_uint4 &lhs, oc_uint4 rhs) { lhs = lhs / rhs; return lhs; }
__device__ oc_uint4& operator%=(oc_uint4 &lhs, oc_uint4 rhs) { lhs = lhs % rhs; return lhs; }

__device__ oc_float2& operator+=(oc_float2 &lhs, oc_float2 rhs) { lhs = lhs + rhs; return lhs; }
__device__ oc_float2& operator-=(oc_float2 &lhs, oc_float2 rhs) { lhs = lhs - rhs; return lhs; }
__device__ oc_float2& operator*=(oc_float2 &lhs, oc_float2 rhs) { lhs = lhs * rhs; return lhs; }
__device__ oc_float2& operator/=(oc_float2 &lhs, oc_float2 rhs) { lhs = lhs / rhs; return lhs; }
__device__ oc_float3& operator+=(oc_float3 &lhs, oc_float3 rhs) { lhs = lhs + rhs; return lhs; }
__device__ oc_float3& operator-=(oc_float3 &lhs, oc_float3 rhs) { lhs = lhs - rhs; return lhs; }
__device__ oc_float3& operator*=(oc_float3 &lhs, oc_float3 rhs) { lhs = lhs * rhs; return lhs; }
__device__ oc_float3& operator/=(oc_float3 &lhs, oc_float3 rhs) { lhs = lhs / rhs; return lhs; }
__device__ oc_float4& operator+=(oc_float4 &lhs, oc_float4 rhs) { lhs = lhs + rhs; return lhs; }
__device__ oc_float4& operator-=(oc_float4 &lhs, oc_float4 rhs) { lhs = lhs - rhs; return lhs; }
__device__ oc_float4& operator*=(oc_float4 &lhs, oc_float4 rhs) { lhs = lhs * rhs; return lhs; }
__device__ oc_float4& operator/=(oc_float4 &lhs, oc_float4 rhs) { lhs = lhs / rhs; return lhs; }

__device__ oc_bool oc_any(oc_bool2 vec) { return vec.x || vec.y; }
__device__ oc_bool oc_any(oc_bool3 vec) { return vec.x || vec.y || vec.z; }
__device__ oc_bool oc_any(oc_bool4 vec) { return vec.x || vec.y || vec.z || vec.w; }
__device__ oc_bool oc_all(oc_bool2 vec) { return vec.x && vec.y; }
__device__ oc_bool oc_all(oc_bool3 vec) { return vec.x && vec.y && vec.z; }
__device__ oc_bool oc_all(oc_bool4 vec) { return vec.x && vec.y && vec.z && vec.w; }
__device__ oc_bool oc_none(oc_bool2 vec) { return !oc_any(vec); }
__device__ oc_bool oc_none(oc_bool3 vec) { return !oc_any(vec); }
__device__ oc_bool oc_none(oc_bool4 vec) { return !oc_any(vec); }

struct oc_float2x2 {
	oc_float2 cols[2];
	__device__ explicit inline oc_float2x2(oc_float s = 1.f)
		:cols{oc_float2(s, 0.f), oc_float2(0.f, s)} {}
	__device__ oc_float2x2(oc_float2 c0, oc_float2 c1)
		:cols{c0, c1} {}
	__device__ oc_float2x2 (oc_float m00, oc_float m01, oc_float m10, oc_float m11):oc_float2x2(oc_float2(m00, m01), oc_float2(m10, m11)) {}
	__device__ auto &operator[](oc_uint i) noexcept { return cols[i]; }
	__device__ auto operator[](oc_uint i) const noexcept { return cols[i]; }
};
 
struct oc_float3x3 {
	oc_float3 cols[3];
	__device__ explicit inline oc_float3x3(oc_float s = 1.f)
		:cols{oc_float3(s, 0.f, 0.f), oc_float3(0.f, s, 0.f), oc_float3(0.f, 0.f, s)} {}
	__device__ oc_float3x3(oc_float3 c0, oc_float3 c1, oc_float3 c2)
		:cols{c0, c1, c2} {}
	__device__ oc_float3x3 (oc_float m00, oc_float m01, oc_float m02, oc_float m10, oc_float m11, oc_float m12, oc_float m20, oc_float m21, oc_float m22):oc_float3x3(oc_float3(m00, m01, m02), oc_float3(m10, m11, m12), oc_float3(m20, m21, m22)) {}
	__device__ auto &operator[](oc_uint i) noexcept { return cols[i]; }
	__device__ auto operator[](oc_uint i) const noexcept { return cols[i]; }
};
 
struct oc_float4x4 {
	oc_float4 cols[4];
	__device__ explicit inline oc_float4x4(oc_float s = 1.f)
		:cols{oc_float4(s, 0.f, 0.f, 0.f), oc_float4(0.f, s, 0.f, 0.f), oc_float4(0.f, 0.f, s, 0.f), oc_float4(0.f, 0.f, 0.f, s)} {}
	__device__ oc_float4x4(oc_float4 c0, oc_float4 c1, oc_float4 c2, oc_float4 c3)
		:cols{c0, c1, c2, c3} {}
	__device__ oc_float4x4 (oc_float m00, oc_float m01, oc_float m02, oc_float m03, oc_float m10, oc_float m11, oc_float m12, oc_float m13, oc_float m20, oc_float m21, oc_float m22, oc_float m23, oc_float m30, oc_float m31, oc_float m32, oc_float m33):oc_float4x4(oc_float4(m00, m01, m02, m03), oc_float4(m10, m11, m12, m13), oc_float4(m20, m21, m22, m23), oc_float4(m30, m31, m32, m33)) {}
	__device__ auto &operator[](oc_uint i) noexcept { return cols[i]; }
	__device__ auto operator[](oc_uint i) const noexcept { return cols[i]; }
};
 
__device__ auto operator+(oc_float2x2 m, oc_int s) {
	return oc_float2x2(m[0] + s, m[1] + s);
}
__device__ auto operator+(oc_int s, oc_float2x2 m) {
	return oc_float2x2(s + m[0], s + m[1]);
}
__device__ auto operator-(oc_float2x2 m, oc_int s) {
	return oc_float2x2(m[0] - s, m[1] - s);
}
__device__ auto operator-(oc_int s, oc_float2x2 m) {
	return oc_float2x2(s - m[0], s - m[1]);
}
__device__ auto operator*(oc_float2x2 m, oc_int s) {
	return oc_float2x2(m[0] * s, m[1] * s);
}
__device__ auto operator*(oc_int s, oc_float2x2 m) {
	return oc_float2x2(s * m[0], s * m[1]);
}
__device__ auto operator/(oc_float2x2 m, oc_int s) {
	return oc_float2x2(m[0] / s, m[1] / s);
}
__device__ auto operator/(oc_int s, oc_float2x2 m) {
	return oc_float2x2(s / m[0], s / m[1]);
}
__device__ auto operator+(oc_float2x2 m, oc_uint s) {
	return oc_float2x2(m[0] + s, m[1] + s);
}
__device__ auto operator+(oc_uint s, oc_float2x2 m) {
	return oc_float2x2(s + m[0], s + m[1]);
}
__device__ auto operator-(oc_float2x2 m, oc_uint s) {
	return oc_float2x2(m[0] - s, m[1] - s);
}
__device__ auto operator-(oc_uint s, oc_float2x2 m) {
	return oc_float2x2(s - m[0], s - m[1]);
}
__device__ auto operator*(oc_float2x2 m, oc_uint s) {
	return oc_float2x2(m[0] * s, m[1] * s);
}
__device__ auto operator*(oc_uint s, oc_float2x2 m) {
	return oc_float2x2(s * m[0], s * m[1]);
}
__device__ auto operator/(oc_float2x2 m, oc_uint s) {
	return oc_float2x2(m[0] / s, m[1] / s);
}
__device__ auto operator/(oc_uint s, oc_float2x2 m) {
	return oc_float2x2(s / m[0], s / m[1]);
}
__device__ auto operator+(oc_float2x2 m, oc_float s) {
	return oc_float2x2(m[0] + s, m[1] + s);
}
__device__ auto operator+(oc_float s, oc_float2x2 m) {
	return oc_float2x2(s + m[0], s + m[1]);
}
__device__ auto operator-(oc_float2x2 m, oc_float s) {
	return oc_float2x2(m[0] - s, m[1] - s);
}
__device__ auto operator-(oc_float s, oc_float2x2 m) {
	return oc_float2x2(s - m[0], s - m[1]);
}
__device__ auto operator*(oc_float2x2 m, oc_float s) {
	return oc_float2x2(m[0] * s, m[1] * s);
}
__device__ auto operator*(oc_float s, oc_float2x2 m) {
	return oc_float2x2(s * m[0], s * m[1]);
}
__device__ auto operator/(oc_float2x2 m, oc_float s) {
	return oc_float2x2(m[0] / s, m[1] / s);
}
__device__ auto operator/(oc_float s, oc_float2x2 m) {
	return oc_float2x2(s / m[0], s / m[1]);
}
__device__ auto operator*(oc_float2x2 m, oc_float2 v) {
	return v[0] * m[0] + v[1] * m[1];
}
__device__ auto operator+(oc_float2x2 lhs, oc_float2x2 rhs) {
	return oc_float2x2(lhs[0] + rhs[0], lhs[1] + rhs[1]);
}
__device__ auto operator-(oc_float2x2 lhs, oc_float2x2 rhs) {
	return oc_float2x2(lhs[0] - rhs[0], lhs[1] - rhs[1]);
}
__device__ auto operator*(oc_float2x2 lhs, oc_float2x2 rhs) {
	return oc_float2x2(lhs * rhs[0], lhs * rhs[1]);
}
__device__ auto operator+(oc_float3x3 m, oc_int s) {
	return oc_float3x3(m[0] + s, m[1] + s, m[2] + s);
}
__device__ auto operator+(oc_int s, oc_float3x3 m) {
	return oc_float3x3(s + m[0], s + m[1], s + m[2]);
}
__device__ auto operator-(oc_float3x3 m, oc_int s) {
	return oc_float3x3(m[0] - s, m[1] - s, m[2] - s);
}
__device__ auto operator-(oc_int s, oc_float3x3 m) {
	return oc_float3x3(s - m[0], s - m[1], s - m[2]);
}
__device__ auto operator*(oc_float3x3 m, oc_int s) {
	return oc_float3x3(m[0] * s, m[1] * s, m[2] * s);
}
__device__ auto operator*(oc_int s, oc_float3x3 m) {
	return oc_float3x3(s * m[0], s * m[1], s * m[2]);
}
__device__ auto operator/(oc_float3x3 m, oc_int s) {
	return oc_float3x3(m[0] / s, m[1] / s, m[2] / s);
}
__device__ auto operator/(oc_int s, oc_float3x3 m) {
	return oc_float3x3(s / m[0], s / m[1], s / m[2]);
}
__device__ auto operator+(oc_float3x3 m, oc_uint s) {
	return oc_float3x3(m[0] + s, m[1] + s, m[2] + s);
}
__device__ auto operator+(oc_uint s, oc_float3x3 m) {
	return oc_float3x3(s + m[0], s + m[1], s + m[2]);
}
__device__ auto operator-(oc_float3x3 m, oc_uint s) {
	return oc_float3x3(m[0] - s, m[1] - s, m[2] - s);
}
__device__ auto operator-(oc_uint s, oc_float3x3 m) {
	return oc_float3x3(s - m[0], s - m[1], s - m[2]);
}
__device__ auto operator*(oc_float3x3 m, oc_uint s) {
	return oc_float3x3(m[0] * s, m[1] * s, m[2] * s);
}
__device__ auto operator*(oc_uint s, oc_float3x3 m) {
	return oc_float3x3(s * m[0], s * m[1], s * m[2]);
}
__device__ auto operator/(oc_float3x3 m, oc_uint s) {
	return oc_float3x3(m[0] / s, m[1] / s, m[2] / s);
}
__device__ auto operator/(oc_uint s, oc_float3x3 m) {
	return oc_float3x3(s / m[0], s / m[1], s / m[2]);
}
__device__ auto operator+(oc_float3x3 m, oc_float s) {
	return oc_float3x3(m[0] + s, m[1] + s, m[2] + s);
}
__device__ auto operator+(oc_float s, oc_float3x3 m) {
	return oc_float3x3(s + m[0], s + m[1], s + m[2]);
}
__device__ auto operator-(oc_float3x3 m, oc_float s) {
	return oc_float3x3(m[0] - s, m[1] - s, m[2] - s);
}
__device__ auto operator-(oc_float s, oc_float3x3 m) {
	return oc_float3x3(s - m[0], s - m[1], s - m[2]);
}
__device__ auto operator*(oc_float3x3 m, oc_float s) {
	return oc_float3x3(m[0] * s, m[1] * s, m[2] * s);
}
__device__ auto operator*(oc_float s, oc_float3x3 m) {
	return oc_float3x3(s * m[0], s * m[1], s * m[2]);
}
__device__ auto operator/(oc_float3x3 m, oc_float s) {
	return oc_float3x3(m[0] / s, m[1] / s, m[2] / s);
}
__device__ auto operator/(oc_float s, oc_float3x3 m) {
	return oc_float3x3(s / m[0], s / m[1], s / m[2]);
}
__device__ auto operator*(oc_float3x3 m, oc_float3 v) {
	return v[0] * m[0] + v[1] * m[1] + v[2] * m[2];
}
__device__ auto operator+(oc_float3x3 lhs, oc_float3x3 rhs) {
	return oc_float3x3(lhs[0] + rhs[0], lhs[1] + rhs[1], lhs[2] + rhs[2]);
}
__device__ auto operator-(oc_float3x3 lhs, oc_float3x3 rhs) {
	return oc_float3x3(lhs[0] - rhs[0], lhs[1] - rhs[1], lhs[2] - rhs[2]);
}
__device__ auto operator*(oc_float3x3 lhs, oc_float3x3 rhs) {
	return oc_float3x3(lhs * rhs[0], lhs * rhs[1], lhs * rhs[2]);
}
__device__ auto operator+(oc_float4x4 m, oc_int s) {
	return oc_float4x4(m[0] + s, m[1] + s, m[2] + s, m[3] + s);
}
__device__ auto operator+(oc_int s, oc_float4x4 m) {
	return oc_float4x4(s + m[0], s + m[1], s + m[2], s + m[3]);
}
__device__ auto operator-(oc_float4x4 m, oc_int s) {
	return oc_float4x4(m[0] - s, m[1] - s, m[2] - s, m[3] - s);
}
__device__ auto operator-(oc_int s, oc_float4x4 m) {
	return oc_float4x4(s - m[0], s - m[1], s - m[2], s - m[3]);
}
__device__ auto operator*(oc_float4x4 m, oc_int s) {
	return oc_float4x4(m[0] * s, m[1] * s, m[2] * s, m[3] * s);
}
__device__ auto operator*(oc_int s, oc_float4x4 m) {
	return oc_float4x4(s * m[0], s * m[1], s * m[2], s * m[3]);
}
__device__ auto operator/(oc_float4x4 m, oc_int s) {
	return oc_float4x4(m[0] / s, m[1] / s, m[2] / s, m[3] / s);
}
__device__ auto operator/(oc_int s, oc_float4x4 m) {
	return oc_float4x4(s / m[0], s / m[1], s / m[2], s / m[3]);
}
__device__ auto operator+(oc_float4x4 m, oc_uint s) {
	return oc_float4x4(m[0] + s, m[1] + s, m[2] + s, m[3] + s);
}
__device__ auto operator+(oc_uint s, oc_float4x4 m) {
	return oc_float4x4(s + m[0], s + m[1], s + m[2], s + m[3]);
}
__device__ auto operator-(oc_float4x4 m, oc_uint s) {
	return oc_float4x4(m[0] - s, m[1] - s, m[2] - s, m[3] - s);
}
__device__ auto operator-(oc_uint s, oc_float4x4 m) {
	return oc_float4x4(s - m[0], s - m[1], s - m[2], s - m[3]);
}
__device__ auto operator*(oc_float4x4 m, oc_uint s) {
	return oc_float4x4(m[0] * s, m[1] * s, m[2] * s, m[3] * s);
}
__device__ auto operator*(oc_uint s, oc_float4x4 m) {
	return oc_float4x4(s * m[0], s * m[1], s * m[2], s * m[3]);
}
__device__ auto operator/(oc_float4x4 m, oc_uint s) {
	return oc_float4x4(m[0] / s, m[1] / s, m[2] / s, m[3] / s);
}
__device__ auto operator/(oc_uint s, oc_float4x4 m) {
	return oc_float4x4(s / m[0], s / m[1], s / m[2], s / m[3]);
}
__device__ auto operator+(oc_float4x4 m, oc_float s) {
	return oc_float4x4(m[0] + s, m[1] + s, m[2] + s, m[3] + s);
}
__device__ auto operator+(oc_float s, oc_float4x4 m) {
	return oc_float4x4(s + m[0], s + m[1], s + m[2], s + m[3]);
}
__device__ auto operator-(oc_float4x4 m, oc_float s) {
	return oc_float4x4(m[0] - s, m[1] - s, m[2] - s, m[3] - s);
}
__device__ auto operator-(oc_float s, oc_float4x4 m) {
	return oc_float4x4(s - m[0], s - m[1], s - m[2], s - m[3]);
}
__device__ auto operator*(oc_float4x4 m, oc_float s) {
	return oc_float4x4(m[0] * s, m[1] * s, m[2] * s, m[3] * s);
}
__device__ auto operator*(oc_float s, oc_float4x4 m) {
	return oc_float4x4(s * m[0], s * m[1], s * m[2], s * m[3]);
}
__device__ auto operator/(oc_float4x4 m, oc_float s) {
	return oc_float4x4(m[0] / s, m[1] / s, m[2] / s, m[3] / s);
}
__device__ auto operator/(oc_float s, oc_float4x4 m) {
	return oc_float4x4(s / m[0], s / m[1], s / m[2], s / m[3]);
}
__device__ auto operator*(oc_float4x4 m, oc_float4 v) {
	return v[0] * m[0] + v[1] * m[1] + v[2] * m[2] + v[3] * m[3];
}
__device__ auto operator+(oc_float4x4 lhs, oc_float4x4 rhs) {
	return oc_float4x4(lhs[0] + rhs[0], lhs[1] + rhs[1], lhs[2] + rhs[2], lhs[3] + rhs[3]);
}
__device__ auto operator-(oc_float4x4 lhs, oc_float4x4 rhs) {
	return oc_float4x4(lhs[0] - rhs[0], lhs[1] - rhs[1], lhs[2] - rhs[2], lhs[3] - rhs[3]);
}
__device__ auto operator*(oc_float4x4 lhs, oc_float4x4 rhs) {
	return oc_float4x4(lhs * rhs[0], lhs * rhs[1], lhs * rhs[2], lhs * rhs[3]);
}

__device__ oc_int oc_select(oc_bool pred, oc_int t, oc_int f) { return pred ? t : f; }
__device__ oc_int2 oc_select(oc_bool2 pred, oc_int2 t, oc_int2 f) {
	return oc_int2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_int3 oc_select(oc_bool3 pred, oc_int3 t, oc_int3 f) {
	return oc_int3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_int4 oc_select(oc_bool4 pred, oc_int4 t, oc_int4 f) {
	return oc_int4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}

__device__ oc_uint oc_select(oc_bool pred, oc_uint t, oc_uint f) { return pred ? t : f; }
__device__ oc_uint2 oc_select(oc_bool2 pred, oc_uint2 t, oc_uint2 f) {
	return oc_uint2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_uint3 oc_select(oc_bool3 pred, oc_uint3 t, oc_uint3 f) {
	return oc_uint3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_uint4 oc_select(oc_bool4 pred, oc_uint4 t, oc_uint4 f) {
	return oc_uint4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}

__device__ oc_float oc_select(oc_bool pred, oc_float t, oc_float f) { return pred ? t : f; }
__device__ oc_float2 oc_select(oc_bool2 pred, oc_float2 t, oc_float2 f) {
	return oc_float2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_float3 oc_select(oc_bool3 pred, oc_float3 t, oc_float3 f) {
	return oc_float3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_float4 oc_select(oc_bool4 pred, oc_float4 t, oc_float4 f) {
	return oc_float4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}

__device__ oc_bool oc_select(oc_bool pred, oc_bool t, oc_bool f) { return pred ? t : f; }
__device__ oc_bool2 oc_select(oc_bool2 pred, oc_bool2 t, oc_bool2 f) {
	return oc_bool2(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y));
}
__device__ oc_bool3 oc_select(oc_bool3 pred, oc_bool3 t, oc_bool3 f) {
	return oc_bool3(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z));
}
__device__ oc_bool4 oc_select(oc_bool4 pred, oc_bool4 t, oc_bool4 f) {
	return oc_bool4(oc_select(pred.x, t.x, f.x), oc_select(pred.y, t.y, f.y), oc_select(pred.z, t.z, f.z), oc_select(pred.w, t.w, f.w));
}

__device__ oc_int oc_rcp(oc_int v) { return 1.f / v; }
__device__ oc_int2 oc_rcp(oc_int2 v) { return oc_int2(oc_rcp(v.x), oc_rcp(v.y)); }
__device__ oc_int3 oc_rcp(oc_int3 v) { return oc_int3(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z)); }
__device__ oc_int4 oc_rcp(oc_int4 v) { return oc_int4(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z), oc_rcp(v.w)); }
__device__ oc_uint oc_rcp(oc_uint v) { return 1.f / v; }
__device__ oc_uint2 oc_rcp(oc_uint2 v) { return oc_uint2(oc_rcp(v.x), oc_rcp(v.y)); }
__device__ oc_uint3 oc_rcp(oc_uint3 v) { return oc_uint3(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z)); }
__device__ oc_uint4 oc_rcp(oc_uint4 v) { return oc_uint4(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z), oc_rcp(v.w)); }
__device__ oc_float oc_rcp(oc_float v) { return 1.f / v; }
__device__ oc_float2 oc_rcp(oc_float2 v) { return oc_float2(oc_rcp(v.x), oc_rcp(v.y)); }
__device__ oc_float3 oc_rcp(oc_float3 v) { return oc_float3(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z)); }
__device__ oc_float4 oc_rcp(oc_float4 v) { return oc_float4(oc_rcp(v.x), oc_rcp(v.y), oc_rcp(v.z), oc_rcp(v.w)); }

__device__ oc_float oc_abs(oc_float v) { return fabsf(v); }
__device__ oc_float2 oc_abs(oc_float2 v) { return oc_float2(oc_abs(v.x), oc_abs(v.y)); }
__device__ oc_float3 oc_abs(oc_float3 v) { return oc_float3(oc_abs(v.x), oc_abs(v.y), oc_abs(v.z)); }
__device__ oc_float4 oc_abs(oc_float4 v) { return oc_float4(oc_abs(v.x), oc_abs(v.y), oc_abs(v.z), oc_abs(v.w)); }

__device__ oc_int oc_abs(oc_int v) { return abs(v); }
__device__ oc_int2 oc_abs(oc_int2 v) { return oc_int2(oc_abs(v.x), oc_abs(v.y)); }
__device__ oc_int3 oc_abs(oc_int3 v) { return oc_int3(oc_abs(v.x), oc_abs(v.y), oc_abs(v.z)); }
__device__ oc_int4 oc_abs(oc_int4 v) { return oc_int4(oc_abs(v.x), oc_abs(v.y), oc_abs(v.z), oc_abs(v.w)); }

__device__ oc_float oc_ceil(oc_float v) { return ceilf(v); }
__device__ oc_float2 oc_ceil(oc_float2 v) { return oc_float2(oc_ceil(v.x), oc_ceil(v.y)); }
__device__ oc_float3 oc_ceil(oc_float3 v) { return oc_float3(oc_ceil(v.x), oc_ceil(v.y), oc_ceil(v.z)); }
__device__ oc_float4 oc_ceil(oc_float4 v) { return oc_float4(oc_ceil(v.x), oc_ceil(v.y), oc_ceil(v.z), oc_ceil(v.w)); }

__device__ oc_float oc_floor(oc_float v) { return floorf(v); }
__device__ oc_float2 oc_floor(oc_float2 v) { return oc_float2(oc_floor(v.x), oc_floor(v.y)); }
__device__ oc_float3 oc_floor(oc_float3 v) { return oc_float3(oc_floor(v.x), oc_floor(v.y), oc_floor(v.z)); }
__device__ oc_float4 oc_floor(oc_float4 v) { return oc_float4(oc_floor(v.x), oc_floor(v.y), oc_floor(v.z), oc_floor(v.w)); }

__device__ oc_float oc_round(oc_float v) { return roundf(v); }
__device__ oc_float2 oc_round(oc_float2 v) { return oc_float2(oc_round(v.x), oc_round(v.y)); }
__device__ oc_float3 oc_round(oc_float3 v) { return oc_float3(oc_round(v.x), oc_round(v.y), oc_round(v.z)); }
__device__ oc_float4 oc_round(oc_float4 v) { return oc_float4(oc_round(v.x), oc_round(v.y), oc_round(v.z), oc_round(v.w)); }

__device__ oc_float oc_sin(oc_float v) { return sinf(v); }
__device__ oc_float2 oc_sin(oc_float2 v) { return oc_float2(oc_sin(v.x), oc_sin(v.y)); }
__device__ oc_float3 oc_sin(oc_float3 v) { return oc_float3(oc_sin(v.x), oc_sin(v.y), oc_sin(v.z)); }
__device__ oc_float4 oc_sin(oc_float4 v) { return oc_float4(oc_sin(v.x), oc_sin(v.y), oc_sin(v.z), oc_sin(v.w)); }

__device__ oc_float oc_cos(oc_float v) { return cosf(v); }
__device__ oc_float2 oc_cos(oc_float2 v) { return oc_float2(oc_cos(v.x), oc_cos(v.y)); }
__device__ oc_float3 oc_cos(oc_float3 v) { return oc_float3(oc_cos(v.x), oc_cos(v.y), oc_cos(v.z)); }
__device__ oc_float4 oc_cos(oc_float4 v) { return oc_float4(oc_cos(v.x), oc_cos(v.y), oc_cos(v.z), oc_cos(v.w)); }

__device__ oc_float oc_tan(oc_float v) { return tanf(v); }
__device__ oc_float2 oc_tan(oc_float2 v) { return oc_float2(oc_tan(v.x), oc_tan(v.y)); }
__device__ oc_float3 oc_tan(oc_float3 v) { return oc_float3(oc_tan(v.x), oc_tan(v.y), oc_tan(v.z)); }
__device__ oc_float4 oc_tan(oc_float4 v) { return oc_float4(oc_tan(v.x), oc_tan(v.y), oc_tan(v.z), oc_tan(v.w)); }

__device__ oc_float oc_asin(oc_float v) { return asinf(v); }
__device__ oc_float2 oc_asin(oc_float2 v) { return oc_float2(oc_asin(v.x), oc_asin(v.y)); }
__device__ oc_float3 oc_asin(oc_float3 v) { return oc_float3(oc_asin(v.x), oc_asin(v.y), oc_asin(v.z)); }
__device__ oc_float4 oc_asin(oc_float4 v) { return oc_float4(oc_asin(v.x), oc_asin(v.y), oc_asin(v.z), oc_asin(v.w)); }

__device__ oc_float oc_acos(oc_float v) { return acosf(v); }
__device__ oc_float2 oc_acos(oc_float2 v) { return oc_float2(oc_acos(v.x), oc_acos(v.y)); }
__device__ oc_float3 oc_acos(oc_float3 v) { return oc_float3(oc_acos(v.x), oc_acos(v.y), oc_acos(v.z)); }
__device__ oc_float4 oc_acos(oc_float4 v) { return oc_float4(oc_acos(v.x), oc_acos(v.y), oc_acos(v.z), oc_acos(v.w)); }

__device__ oc_float oc_atan(oc_float v) { return atanf(v); }
__device__ oc_float2 oc_atan(oc_float2 v) { return oc_float2(oc_atan(v.x), oc_atan(v.y)); }
__device__ oc_float3 oc_atan(oc_float3 v) { return oc_float3(oc_atan(v.x), oc_atan(v.y), oc_atan(v.z)); }
__device__ oc_float4 oc_atan(oc_float4 v) { return oc_float4(oc_atan(v.x), oc_atan(v.y), oc_atan(v.z), oc_atan(v.w)); }

__device__ oc_float oc_is_inf(oc_float v) { return isinf(v); }
__device__ oc_float2 oc_is_inf(oc_float2 v) { return oc_float2(oc_is_inf(v.x), oc_is_inf(v.y)); }
__device__ oc_float3 oc_is_inf(oc_float3 v) { return oc_float3(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z)); }
__device__ oc_float4 oc_is_inf(oc_float4 v) { return oc_float4(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z), oc_is_inf(v.w)); }

__device__ oc_float oc_is_nan(oc_float v) { return isnan(v); }
__device__ oc_float2 oc_is_nan(oc_float2 v) { return oc_float2(oc_is_nan(v.x), oc_is_nan(v.y)); }
__device__ oc_float3 oc_is_nan(oc_float3 v) { return oc_float3(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z)); }
__device__ oc_float4 oc_is_nan(oc_float4 v) { return oc_float4(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z), oc_is_nan(v.w)); }

__device__ oc_int oc_is_inf(oc_int v) { return false; }
__device__ oc_int2 oc_is_inf(oc_int2 v) { return oc_int2(oc_is_inf(v.x), oc_is_inf(v.y)); }
__device__ oc_int3 oc_is_inf(oc_int3 v) { return oc_int3(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z)); }
__device__ oc_int4 oc_is_inf(oc_int4 v) { return oc_int4(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z), oc_is_inf(v.w)); }
__device__ oc_uint oc_is_inf(oc_uint v) { return false; }
__device__ oc_uint2 oc_is_inf(oc_uint2 v) { return oc_uint2(oc_is_inf(v.x), oc_is_inf(v.y)); }
__device__ oc_uint3 oc_is_inf(oc_uint3 v) { return oc_uint3(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z)); }
__device__ oc_uint4 oc_is_inf(oc_uint4 v) { return oc_uint4(oc_is_inf(v.x), oc_is_inf(v.y), oc_is_inf(v.z), oc_is_inf(v.w)); }

__device__ oc_int oc_is_nan(oc_int v) { return false; }
__device__ oc_int2 oc_is_nan(oc_int2 v) { return oc_int2(oc_is_nan(v.x), oc_is_nan(v.y)); }
__device__ oc_int3 oc_is_nan(oc_int3 v) { return oc_int3(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z)); }
__device__ oc_int4 oc_is_nan(oc_int4 v) { return oc_int4(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z), oc_is_nan(v.w)); }
__device__ oc_uint oc_is_nan(oc_uint v) { return false; }
__device__ oc_uint2 oc_is_nan(oc_uint2 v) { return oc_uint2(oc_is_nan(v.x), oc_is_nan(v.y)); }
__device__ oc_uint3 oc_is_nan(oc_uint3 v) { return oc_uint3(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z)); }
__device__ oc_uint4 oc_is_nan(oc_uint4 v) { return oc_uint4(oc_is_nan(v.x), oc_is_nan(v.y), oc_is_nan(v.z), oc_is_nan(v.w)); }

__device__ oc_float oc_exp(oc_float v) { return expf(v); }
__device__ oc_float2 oc_exp(oc_float2 v) { return oc_float2(oc_exp(v.x), oc_exp(v.y)); }
__device__ oc_float3 oc_exp(oc_float3 v) { return oc_float3(oc_exp(v.x), oc_exp(v.y), oc_exp(v.z)); }
__device__ oc_float4 oc_exp(oc_float4 v) { return oc_float4(oc_exp(v.x), oc_exp(v.y), oc_exp(v.z), oc_exp(v.w)); }

__device__ oc_float oc_exp2(oc_float v) { return exp2f(v); }
__device__ oc_float2 oc_exp2(oc_float2 v) { return oc_float2(oc_exp2(v.x), oc_exp2(v.y)); }
__device__ oc_float3 oc_exp2(oc_float3 v) { return oc_float3(oc_exp2(v.x), oc_exp2(v.y), oc_exp2(v.z)); }
__device__ oc_float4 oc_exp2(oc_float4 v) { return oc_float4(oc_exp2(v.x), oc_exp2(v.y), oc_exp2(v.z), oc_exp2(v.w)); }

__device__ oc_float oc_exp10(oc_float v) { return exp10f(v); }
__device__ oc_float2 oc_exp10(oc_float2 v) { return oc_float2(oc_exp10(v.x), oc_exp10(v.y)); }
__device__ oc_float3 oc_exp10(oc_float3 v) { return oc_float3(oc_exp10(v.x), oc_exp10(v.y), oc_exp10(v.z)); }
__device__ oc_float4 oc_exp10(oc_float4 v) { return oc_float4(oc_exp10(v.x), oc_exp10(v.y), oc_exp10(v.z), oc_exp10(v.w)); }

__device__ oc_float oc_log(oc_float v) { return logf(v); }
__device__ oc_float2 oc_log(oc_float2 v) { return oc_float2(oc_log(v.x), oc_log(v.y)); }
__device__ oc_float3 oc_log(oc_float3 v) { return oc_float3(oc_log(v.x), oc_log(v.y), oc_log(v.z)); }
__device__ oc_float4 oc_log(oc_float4 v) { return oc_float4(oc_log(v.x), oc_log(v.y), oc_log(v.z), oc_log(v.w)); }

__device__ oc_float oc_log2(oc_float v) { return log2f(v); }
__device__ oc_float2 oc_log2(oc_float2 v) { return oc_float2(oc_log2(v.x), oc_log2(v.y)); }
__device__ oc_float3 oc_log2(oc_float3 v) { return oc_float3(oc_log2(v.x), oc_log2(v.y), oc_log2(v.z)); }
__device__ oc_float4 oc_log2(oc_float4 v) { return oc_float4(oc_log2(v.x), oc_log2(v.y), oc_log2(v.z), oc_log2(v.w)); }

__device__ oc_float oc_log10(oc_float v) { return log10f(v); }
__device__ oc_float2 oc_log10(oc_float2 v) { return oc_float2(oc_log10(v.x), oc_log10(v.y)); }
__device__ oc_float3 oc_log10(oc_float3 v) { return oc_float3(oc_log10(v.x), oc_log10(v.y), oc_log10(v.z)); }
__device__ oc_float4 oc_log10(oc_float4 v) { return oc_float4(oc_log10(v.x), oc_log10(v.y), oc_log10(v.z), oc_log10(v.w)); }

__device__ oc_int oc_sqr(oc_int v) { return v * v; }
__device__ oc_int2 oc_sqr(oc_int2 v) { return oc_int2(oc_sqr(v.x), oc_sqr(v.y)); }
__device__ oc_int3 oc_sqr(oc_int3 v) { return oc_int3(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z)); }
__device__ oc_int4 oc_sqr(oc_int4 v) { return oc_int4(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z), oc_sqr(v.w)); }
__device__ oc_uint oc_sqr(oc_uint v) { return v * v; }
__device__ oc_uint2 oc_sqr(oc_uint2 v) { return oc_uint2(oc_sqr(v.x), oc_sqr(v.y)); }
__device__ oc_uint3 oc_sqr(oc_uint3 v) { return oc_uint3(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z)); }
__device__ oc_uint4 oc_sqr(oc_uint4 v) { return oc_uint4(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z), oc_sqr(v.w)); }
__device__ oc_float oc_sqr(oc_float v) { return v * v; }
__device__ oc_float2 oc_sqr(oc_float2 v) { return oc_float2(oc_sqr(v.x), oc_sqr(v.y)); }
__device__ oc_float3 oc_sqr(oc_float3 v) { return oc_float3(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z)); }
__device__ oc_float4 oc_sqr(oc_float4 v) { return oc_float4(oc_sqr(v.x), oc_sqr(v.y), oc_sqr(v.z), oc_sqr(v.w)); }

__device__ oc_float oc_sqrt(oc_float v) { return sqrtf(v); }
__device__ oc_float2 oc_sqrt(oc_float2 v) { return oc_float2(oc_sqrt(v.x), oc_sqrt(v.y)); }
__device__ oc_float3 oc_sqrt(oc_float3 v) { return oc_float3(oc_sqrt(v.x), oc_sqrt(v.y), oc_sqrt(v.z)); }
__device__ oc_float4 oc_sqrt(oc_float4 v) { return oc_float4(oc_sqrt(v.x), oc_sqrt(v.y), oc_sqrt(v.z), oc_sqrt(v.w)); }

__device__ oc_float oc_rsqrt(oc_float v) { return rsqrtf(v); }
__device__ oc_float2 oc_rsqrt(oc_float2 v) { return oc_float2(oc_rsqrt(v.x), oc_rsqrt(v.y)); }
__device__ oc_float3 oc_rsqrt(oc_float3 v) { return oc_float3(oc_rsqrt(v.x), oc_rsqrt(v.y), oc_rsqrt(v.z)); }
__device__ oc_float4 oc_rsqrt(oc_float4 v) { return oc_float4(oc_rsqrt(v.x), oc_rsqrt(v.y), oc_rsqrt(v.z), oc_rsqrt(v.w)); }

__device__ oc_float oc_degrees(oc_float v) { return v * (180.f / 3.1415926535f); }
__device__ oc_float2 oc_degrees(oc_float2 v) { return oc_float2(oc_degrees(v.x), oc_degrees(v.y)); }
__device__ oc_float3 oc_degrees(oc_float3 v) { return oc_float3(oc_degrees(v.x), oc_degrees(v.y), oc_degrees(v.z)); }
__device__ oc_float4 oc_degrees(oc_float4 v) { return oc_float4(oc_degrees(v.x), oc_degrees(v.y), oc_degrees(v.z), oc_degrees(v.w)); }

__device__ oc_float oc_radians(oc_float v) { return v * (3.1415926535f / 180.f); }
__device__ oc_float2 oc_radians(oc_float2 v) { return oc_float2(oc_radians(v.x), oc_radians(v.y)); }
__device__ oc_float3 oc_radians(oc_float3 v) { return oc_float3(oc_radians(v.x), oc_radians(v.y), oc_radians(v.z)); }
__device__ oc_float4 oc_radians(oc_float4 v) { return oc_float4(oc_radians(v.x), oc_radians(v.y), oc_radians(v.z), oc_radians(v.w)); }

__device__ oc_float oc_saturate(oc_float v) { return min(1.f, max(0.f, v)); }
__device__ oc_float2 oc_saturate(oc_float2 v) { return oc_float2(oc_saturate(v.x), oc_saturate(v.y)); }
__device__ oc_float3 oc_saturate(oc_float3 v) { return oc_float3(oc_saturate(v.x), oc_saturate(v.y), oc_saturate(v.z)); }
__device__ oc_float4 oc_saturate(oc_float4 v) { return oc_float4(oc_saturate(v.x), oc_saturate(v.y), oc_saturate(v.z), oc_saturate(v.w)); }

__device__ oc_float oc_pow(oc_float lhs, oc_float rhs) { return powf(lhs, rhs); }
__device__ oc_float2 oc_pow(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_pow(lhs.x, rhs.x), oc_pow(lhs.y, rhs.y)); }
__device__ oc_float3 oc_pow(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_pow(lhs.x, rhs.x), oc_pow(lhs.y, rhs.y), oc_pow(lhs.z, rhs.z)); }
__device__ oc_float4 oc_pow(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_pow(lhs.x, rhs.x), oc_pow(lhs.y, rhs.y), oc_pow(lhs.z, rhs.z), oc_pow(lhs.w, rhs.w)); }

__device__ oc_int oc_min(oc_int lhs, oc_int rhs) { return fminf(lhs, rhs); }
__device__ oc_int2 oc_min(oc_int2 lhs, oc_int2 rhs) { return oc_int2(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y)); }
__device__ oc_int3 oc_min(oc_int3 lhs, oc_int3 rhs) { return oc_int3(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z)); }
__device__ oc_int4 oc_min(oc_int4 lhs, oc_int4 rhs) { return oc_int4(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z), oc_min(lhs.w, rhs.w)); }
__device__ oc_uint oc_min(oc_uint lhs, oc_uint rhs) { return fminf(lhs, rhs); }
__device__ oc_uint2 oc_min(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y)); }
__device__ oc_uint3 oc_min(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z)); }
__device__ oc_uint4 oc_min(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z), oc_min(lhs.w, rhs.w)); }
__device__ oc_float oc_min(oc_float lhs, oc_float rhs) { return fminf(lhs, rhs); }
__device__ oc_float2 oc_min(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y)); }
__device__ oc_float3 oc_min(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z)); }
__device__ oc_float4 oc_min(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_min(lhs.x, rhs.x), oc_min(lhs.y, rhs.y), oc_min(lhs.z, rhs.z), oc_min(lhs.w, rhs.w)); }

__device__ oc_int oc_max(oc_int lhs, oc_int rhs) { return fmaxf(lhs, rhs); }
__device__ oc_int2 oc_max(oc_int2 lhs, oc_int2 rhs) { return oc_int2(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y)); }
__device__ oc_int3 oc_max(oc_int3 lhs, oc_int3 rhs) { return oc_int3(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z)); }
__device__ oc_int4 oc_max(oc_int4 lhs, oc_int4 rhs) { return oc_int4(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z), oc_max(lhs.w, rhs.w)); }
__device__ oc_uint oc_max(oc_uint lhs, oc_uint rhs) { return fmaxf(lhs, rhs); }
__device__ oc_uint2 oc_max(oc_uint2 lhs, oc_uint2 rhs) { return oc_uint2(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y)); }
__device__ oc_uint3 oc_max(oc_uint3 lhs, oc_uint3 rhs) { return oc_uint3(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z)); }
__device__ oc_uint4 oc_max(oc_uint4 lhs, oc_uint4 rhs) { return oc_uint4(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z), oc_max(lhs.w, rhs.w)); }
__device__ oc_float oc_max(oc_float lhs, oc_float rhs) { return fmaxf(lhs, rhs); }
__device__ oc_float2 oc_max(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y)); }
__device__ oc_float3 oc_max(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z)); }
__device__ oc_float4 oc_max(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_max(lhs.x, rhs.x), oc_max(lhs.y, rhs.y), oc_max(lhs.z, rhs.z), oc_max(lhs.w, rhs.w)); }

__device__ oc_float oc_atan2(oc_float lhs, oc_float rhs) { return atan2f(lhs, rhs); }
__device__ oc_float2 oc_atan2(oc_float2 lhs, oc_float2 rhs) { return oc_float2(oc_atan2(lhs.x, rhs.x), oc_atan2(lhs.y, rhs.y)); }
__device__ oc_float3 oc_atan2(oc_float3 lhs, oc_float3 rhs) { return oc_float3(oc_atan2(lhs.x, rhs.x), oc_atan2(lhs.y, rhs.y), oc_atan2(lhs.z, rhs.z)); }
__device__ oc_float4 oc_atan2(oc_float4 lhs, oc_float4 rhs) { return oc_float4(oc_atan2(lhs.x, rhs.x), oc_atan2(lhs.y, rhs.y), oc_atan2(lhs.z, rhs.z), oc_atan2(lhs.w, rhs.w)); }

__device__ oc_float oc_lerp(oc_float v0, oc_float v1, oc_float v2) { return v1 + v0 * (v2 - v1); }
__device__ oc_float2 oc_lerp(oc_float2 v0, oc_float2 v1, oc_float2 v2) { return oc_float2(oc_lerp(v0.x, v1.x, v2.x), oc_lerp(v0.y, v1.y, v2.y)); }
__device__ oc_float3 oc_lerp(oc_float3 v0, oc_float3 v1, oc_float3 v2) { return oc_float3(oc_lerp(v0.x, v1.x, v2.x), oc_lerp(v0.y, v1.y, v2.y), oc_lerp(v0.z, v1.z, v2.z)); }
__device__ oc_float4 oc_lerp(oc_float4 v0, oc_float4 v1, oc_float4 v2) { return oc_float4(oc_lerp(v0.x, v1.x, v2.x), oc_lerp(v0.y, v1.y, v2.y), oc_lerp(v0.z, v1.z, v2.z), oc_lerp(v0.w, v1.w, v2.w)); }

__device__ oc_float oc_clamp(oc_float v0, oc_float v1, oc_float v2) { if (v0 < v1) { return v1; } else if (v0 > v2) { return v2; } else { return v0; } }
__device__ oc_float2 oc_clamp(oc_float2 v0, oc_float2 v1, oc_float2 v2) { return oc_float2(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y)); }
__device__ oc_float3 oc_clamp(oc_float3 v0, oc_float3 v1, oc_float3 v2) { return oc_float3(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z)); }
__device__ oc_float4 oc_clamp(oc_float4 v0, oc_float4 v1, oc_float4 v2) { return oc_float4(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z), oc_clamp(v0.w, v1.w, v2.w)); }
__device__ oc_uint oc_clamp(oc_uint v0, oc_uint v1, oc_uint v2) { if (v0 < v1) { return v1; } else if (v0 > v2) { return v2; } else { return v0; } }
__device__ oc_uint2 oc_clamp(oc_uint2 v0, oc_uint2 v1, oc_uint2 v2) { return oc_uint2(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y)); }
__device__ oc_uint3 oc_clamp(oc_uint3 v0, oc_uint3 v1, oc_uint3 v2) { return oc_uint3(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z)); }
__device__ oc_uint4 oc_clamp(oc_uint4 v0, oc_uint4 v1, oc_uint4 v2) { return oc_uint4(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z), oc_clamp(v0.w, v1.w, v2.w)); }
__device__ oc_int oc_clamp(oc_int v0, oc_int v1, oc_int v2) { if (v0 < v1) { return v1; } else if (v0 > v2) { return v2; } else { return v0; } }
__device__ oc_int2 oc_clamp(oc_int2 v0, oc_int2 v1, oc_int2 v2) { return oc_int2(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y)); }
__device__ oc_int3 oc_clamp(oc_int3 v0, oc_int3 v1, oc_int3 v2) { return oc_int3(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z)); }
__device__ oc_int4 oc_clamp(oc_int4 v0, oc_int4 v1, oc_int4 v2) { return oc_int4(oc_clamp(v0.x, v1.x, v2.x), oc_clamp(v0.y, v1.y, v2.y), oc_clamp(v0.z, v1.z, v2.z), oc_clamp(v0.w, v1.w, v2.w)); }

__device__ oc_float oc_fma(oc_float v0, oc_float v1, oc_float v2) { return fmaf(v0, v1, v2); }
__device__ oc_float2 oc_fma(oc_float2 v0, oc_float2 v1, oc_float2 v2) { return oc_float2(oc_fma(v0.x, v1.x, v2.x), oc_fma(v0.y, v1.y, v2.y)); }
__device__ oc_float3 oc_fma(oc_float3 v0, oc_float3 v1, oc_float3 v2) { return oc_float3(oc_fma(v0.x, v1.x, v2.x), oc_fma(v0.y, v1.y, v2.y), oc_fma(v0.z, v1.z, v2.z)); }
__device__ oc_float4 oc_fma(oc_float4 v0, oc_float4 v1, oc_float4 v2) { return oc_float4(oc_fma(v0.x, v1.x, v2.x), oc_fma(v0.y, v1.y, v2.y), oc_fma(v0.z, v1.z, v2.z), oc_fma(v0.w, v1.w, v2.w)); }

__device__ inline auto oc_dot(oc_float2 a, oc_float2 b) { return a.x + b.x + a.y + b.y; }
__device__ inline auto oc_length(oc_float2 v) noexcept { {return oc_sqrt(oc_dot(v, v));} }
__device__ inline auto oc_length_squared(oc_float2 v) noexcept { {return oc_dot(v, v);} }
__device__ inline auto oc_distance(oc_float2 a, oc_float2 b) noexcept { {return oc_length(a - b);} }
__device__ inline auto oc_distance_squared(oc_float2 a, oc_float2 b) noexcept { {return oc_length_squared(a - b);} }
__device__ inline auto oc_normalize(oc_float2 v) noexcept { {return v * oc_rsqrt(oc_dot(v, v));} }

__device__ inline auto oc_dot(oc_float3 a, oc_float3 b) { return a.x + b.x + a.y + b.y + a.z + b.z; }
__device__ inline auto oc_length(oc_float3 v) noexcept { {return oc_sqrt(oc_dot(v, v));} }
__device__ inline auto oc_length_squared(oc_float3 v) noexcept { {return oc_dot(v, v);} }
__device__ inline auto oc_distance(oc_float3 a, oc_float3 b) noexcept { {return oc_length(a - b);} }
__device__ inline auto oc_distance_squared(oc_float3 a, oc_float3 b) noexcept { {return oc_length_squared(a - b);} }
__device__ inline auto oc_normalize(oc_float3 v) noexcept { {return v * oc_rsqrt(oc_dot(v, v));} }

__device__ inline auto oc_dot(oc_float4 a, oc_float4 b) { return a.x + b.x + a.y + b.y + a.z + b.z + a.w + b.w; }
__device__ inline auto oc_length(oc_float4 v) noexcept { {return oc_sqrt(oc_dot(v, v));} }
__device__ inline auto oc_length_squared(oc_float4 v) noexcept { {return oc_dot(v, v);} }
__device__ inline auto oc_distance(oc_float4 a, oc_float4 b) noexcept { {return oc_length(a - b);} }
__device__ inline auto oc_distance_squared(oc_float4 a, oc_float4 b) noexcept { {return oc_length_squared(a - b);} }
__device__ inline auto oc_normalize(oc_float4 v) noexcept { {return v * oc_rsqrt(oc_dot(v, v));} }

[[nodiscard]] __device__ inline auto oc_cross(oc_int3 u, oc_int3 v) noexcept { {return oc_int3(u.y * v.z - v.y * u.z, u.z * v.x - v.z * u.x, u.x * v.y - v.x * u.y); } }
[[nodiscard]] __device__ inline auto oc_cross(oc_uint3 u, oc_uint3 v) noexcept { {return oc_uint3(u.y * v.z - v.y * u.z, u.z * v.x - v.z * u.x, u.x * v.y - v.x * u.y); } }
[[nodiscard]] __device__ inline auto oc_cross(oc_float3 u, oc_float3 v) noexcept { {return oc_float3(u.y * v.z - v.y * u.z, u.z * v.x - v.z * u.x, u.x * v.y - v.x * u.y); } }

[[nodiscard]] __device__ inline auto oc_make_int2(oc_int s = 0) noexcept { return oc_int2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_int x, oc_int y) noexcept { return oc_int2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_int2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_int3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_int4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uint2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uint3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_uint4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_float2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_float3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_float4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_bool2 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_bool3 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int2(oc_bool4 v) noexcept { return oc_int2{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int s = 0) noexcept { return oc_int3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int x, oc_int y, oc_int z) noexcept { return oc_int3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int x, oc_int2 yz) noexcept { return oc_int3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int2 xy, oc_int z) noexcept { return oc_int3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_int4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_uint3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_uint4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_float3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_float4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_bool3 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int3(oc_bool4 v) noexcept { return oc_int3{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int s = 0) noexcept { return oc_int4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int x, oc_int y, oc_int z, oc_int w) noexcept { return oc_int4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int x, oc_int y, oc_int2 zw) noexcept { return oc_int4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int x, oc_int2 yz, oc_int w) noexcept { return oc_int4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int2 xy, oc_int z, oc_int w) noexcept { return oc_int4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int2 xy, oc_int2 zw) noexcept { return oc_int4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int x, oc_int3 yzw) noexcept { return oc_int4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int3 xyz, oc_int w) noexcept { return oc_int4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_int4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_uint4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_float4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_int4(oc_bool4 v) noexcept { return oc_int4{static_cast<oc_int>(v.x), static_cast<oc_int>(v.y), static_cast<oc_int>(v.z), static_cast<oc_int>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint s = 0) noexcept { return oc_uint2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint x, oc_uint y) noexcept { return oc_uint2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_int2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_int3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_int4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_uint4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_float2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_float3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_float4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_bool2 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_bool3 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint2(oc_bool4 v) noexcept { return oc_uint2{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint s = 0) noexcept { return oc_uint3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint x, oc_uint y, oc_uint z) noexcept { return oc_uint3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint x, oc_uint2 yz) noexcept { return oc_uint3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint2 xy, oc_uint z) noexcept { return oc_uint3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_int3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_int4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_uint4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_float3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_float4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_bool3 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint3(oc_bool4 v) noexcept { return oc_uint3{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint s = 0) noexcept { return oc_uint4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint x, oc_uint y, oc_uint z, oc_uint w) noexcept { return oc_uint4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint x, oc_uint y, oc_uint2 zw) noexcept { return oc_uint4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint x, oc_uint2 yz, oc_uint w) noexcept { return oc_uint4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint2 xy, oc_uint z, oc_uint w) noexcept { return oc_uint4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint2 xy, oc_uint2 zw) noexcept { return oc_uint4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint x, oc_uint3 yzw) noexcept { return oc_uint4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint3 xyz, oc_uint w) noexcept { return oc_uint4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_int4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_uint4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_float4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_uint4(oc_bool4 v) noexcept { return oc_uint4{static_cast<oc_uint>(v.x), static_cast<oc_uint>(v.y), static_cast<oc_uint>(v.z), static_cast<oc_uint>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_float s = 0) noexcept { return oc_float2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_float x, oc_float y) noexcept { return oc_float2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_int2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_int3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_int4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uint2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uint3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_uint4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_float2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_float3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_float4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_bool2 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_bool3 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float2(oc_bool4 v) noexcept { return oc_float2{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float s = 0) noexcept { return oc_float3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float x, oc_float y, oc_float z) noexcept { return oc_float3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float x, oc_float2 yz) noexcept { return oc_float3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float2 xy, oc_float z) noexcept { return oc_float3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_int3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_int4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_uint3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_uint4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_float4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_bool3 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float3(oc_bool4 v) noexcept { return oc_float3{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float s = 0) noexcept { return oc_float4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float x, oc_float y, oc_float z, oc_float w) noexcept { return oc_float4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float x, oc_float y, oc_float2 zw) noexcept { return oc_float4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float x, oc_float2 yz, oc_float w) noexcept { return oc_float4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float2 xy, oc_float z, oc_float w) noexcept { return oc_float4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float2 xy, oc_float2 zw) noexcept { return oc_float4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float x, oc_float3 yzw) noexcept { return oc_float4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float3 xyz, oc_float w) noexcept { return oc_float4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_int4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_uint4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_float4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_float4(oc_bool4 v) noexcept { return oc_float4{static_cast<oc_float>(v.x), static_cast<oc_float>(v.y), static_cast<oc_float>(v.z), static_cast<oc_float>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_bool s = 0) noexcept { return oc_bool2{s, s}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_bool x, oc_bool y) noexcept { return oc_bool2{x, y}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_int2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_int3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_int4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uint2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uint3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_uint4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_float2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_float3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_float4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_bool2 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_bool3 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool2(oc_bool4 v) noexcept { return oc_bool2{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool s = 0) noexcept { return oc_bool3{s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool x, oc_bool y, oc_bool z) noexcept { return oc_bool3{x, y, z}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool x, oc_bool2 yz) noexcept { return oc_bool3{x, yz.x, yz.y}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool2 xy, oc_bool z) noexcept { return oc_bool3{xy.x, xy.y, z}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_int3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_int4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_uint3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_uint4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_float3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_float4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool3 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool3(oc_bool4 v) noexcept { return oc_bool3{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool s = 0) noexcept { return oc_bool4{s, s, s, s}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool x, oc_bool y, oc_bool z, oc_bool w) noexcept { return oc_bool4{x, y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool x, oc_bool y, oc_bool2 zw) noexcept { return oc_bool4{x, y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool x, oc_bool2 yz, oc_bool w) noexcept { return oc_bool4{x, yz.x, yz.y, w}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool2 xy, oc_bool z, oc_bool w) noexcept { return oc_bool4{xy.x, xy.y, z, w}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool2 xy, oc_bool2 zw) noexcept { return oc_bool4{xy.x, xy.y, zw.x, zw.y}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool x, oc_bool3 yzw) noexcept { return oc_bool4{x, yzw.x, yzw.y, yzw.z}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool3 xyz, oc_bool w) noexcept { return oc_bool4{xyz.x, xyz.y, xyz.z, w}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_int4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_uint4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_float4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }
[[nodiscard]] __device__ inline auto oc_make_bool4(oc_bool4 v) noexcept { return oc_bool4{static_cast<oc_bool>(v.x), static_cast<oc_bool>(v.y), static_cast<oc_bool>(v.z), static_cast<oc_bool>(v.w)}; }


[[nodiscard]] __device__ inline auto oc_make_float2x2(oc_float s = 1.0f) noexcept { return oc_float2x2{oc_make_float2(s, 0.0f), oc_make_float2(0.0f, s)}; }
[[nodiscard]] __device__ inline auto oc_make_float2x2(oc_float m00, oc_float m01, oc_float m10, oc_float m11) noexcept { return oc_float2x2{oc_make_float2(m00, m01), oc_make_float2(m10, m11)}; }
[[nodiscard]] __device__ inline auto oc_make_float2x2(oc_float2 c0, oc_float2 c1) noexcept { return oc_float2x2{c0, c1}; }
[[nodiscard]] __device__ inline auto oc_make_float2x2(oc_float2x2 m) noexcept { return m; }
[[nodiscard]] __device__ inline auto oc_make_float2x2(oc_float3x3 m) noexcept { return oc_float2x2{oc_make_float2(m[0]), oc_make_float2(m[1])}; }
[[nodiscard]] __device__ inline auto oc_make_float2x2(oc_float4x4 m) noexcept { return oc_float2x2{oc_make_float2(m[0]), oc_make_float2(m[1])}; }

[[nodiscard]] __device__ inline auto oc_make_float3x3(oc_float s = 1.0f) noexcept { return oc_float3x3{oc_make_float3(s, 0.0f, 0.0f), oc_make_float3(0.0f, s, 0.0f), oc_make_float3(0.0f, 0.0f, s)}; }
[[nodiscard]] __device__ inline auto oc_make_float3x3(oc_float m00, oc_float m01, oc_float m02, oc_float m10, oc_float m11, oc_float m12, oc_float m20, oc_float m21, oc_float m22) noexcept { return oc_float3x3{oc_make_float3(m00, m01, m02), oc_make_float3(m10, m11, m12), oc_make_float3(m20, m21, m22)}; }
[[nodiscard]] __device__ inline auto oc_make_float3x3(oc_float3 c0, oc_float3 c1, oc_float3 c2) noexcept { return oc_float3x3{c0, c1, c2}; }
[[nodiscard]] __device__ inline auto oc_make_float3x3(oc_float2x2 m) noexcept { return oc_float3x3{oc_make_float3(m[0], 0.0f), oc_make_float3(m[1], 0.0f), oc_make_float3(0.0f, 0.0f, 1.0f)}; }
[[nodiscard]] __device__ inline auto oc_make_float3x3(oc_float3x3 m) noexcept { return m; }
[[nodiscard]] __device__ inline auto oc_make_float3x3(oc_float4x4 m) noexcept { return oc_float3x3{oc_make_float3(m[0]), oc_make_float3(m[1]), oc_make_float3(m[2])}; }

[[nodiscard]] __device__ inline auto oc_make_float4x4(oc_float s = 1.0f) noexcept { return oc_float4x4{oc_make_float4(s, 0.0f, 0.0f, 0.0f), oc_make_float4(0.0f, s, 0.0f, 0.0f), oc_make_float4(0.0f, 0.0f, s, 0.0f), oc_make_float4(0.0f, 0.0f, 0.0f, s)}; }
[[nodiscard]] __device__ inline auto oc_make_float4x4(oc_float m00, oc_float m01, oc_float m02, oc_float m03, oc_float m10, oc_float m11, oc_float m12, oc_float m13, oc_float m20, oc_float m21, oc_float m22, oc_float m23, oc_float m30, oc_float m31, oc_float m32, oc_float m33) noexcept { return oc_float4x4{oc_make_float4(m00, m01, m02, m03), oc_make_float4(m10, m11, m12, m13), oc_make_float4(m20, m21, m22, m23), oc_make_float4(m30, m31, m32, m33)}; }
[[nodiscard]] __device__ inline auto oc_make_float4x4(oc_float4 c0, oc_float4 c1, oc_float4 c2, oc_float4 c3) noexcept { return oc_float4x4{c0, c1, c2, c3}; }
[[nodiscard]] __device__ inline auto oc_make_float4x4(oc_float2x2 m) noexcept { return oc_float4x4{oc_make_float4(m[0], 0.0f, 0.0f), oc_make_float4(m[1], 0.0f, 0.0f), oc_make_float4(0.0f, 0.0f, 0.0f, 0.0f), oc_make_float4(0.0f, 0.0f, 0.0f, 1.0f)}; }
[[nodiscard]] __device__ inline auto oc_make_float4x4(oc_float3x3 m) noexcept { return oc_float4x4{oc_make_float4(m[0], 0.0f), oc_make_float4(m[1], 0.0f), oc_make_float4(m[2], 0.0f), oc_make_float4(0.0f, 0.0f, 0.0f, 1.0f)}; }
[[nodiscard]] __device__ inline auto oc_make_float4x4(oc_float4x4 m) noexcept { return m; }

 