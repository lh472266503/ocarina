// this file was generated by generate_cuda_math_lib.py, please do not manually modify 
 
#pragma once

using oc_int = int;
using oc_uint = unsigned int;
using oc_float = float;
using oc_bool = bool;

struct alignas(8) oc_int2{
	oc_int x;
	oc_int y;

	__device__ oc_int2() noexcept 
		:x{}, y{} {}
	__device__ oc_int2(oc_int s) noexcept 
		:x(s), y(s) {}
	__device__ oc_int2(oc_int x, oc_int y) noexcept 
		:x(x), y(y) {}
	__device__ constexpr oc_int operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_int &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_int3{
	oc_int x;
	oc_int y;
	oc_int z;

	__device__ oc_int3() noexcept 
		:x{}, y{}, z{} {}
	__device__ oc_int3(oc_int s) noexcept 
		:x(s), y(s), z(s) {}
	__device__ oc_int3(oc_int x, oc_int y, oc_int z) noexcept 
		:x(x), y(y), z(z) {}
	__device__ constexpr oc_int operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_int &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_int4{
	oc_int x;
	oc_int y;
	oc_int z;
	oc_int w;

	__device__ oc_int4() noexcept 
		:x{}, y{}, z{}, w{} {}
	__device__ oc_int4(oc_int s) noexcept 
		:x(s), y(s), z(s), w(s) {}
	__device__ oc_int4(oc_int x, oc_int y, oc_int z, oc_int w) noexcept 
		:x(x), y(y), z(z), w(w) {}
	__device__ constexpr oc_int operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_int &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(8) oc_uint2{
	oc_uint x;
	oc_uint y;

	__device__ oc_uint2() noexcept 
		:x{}, y{} {}
	__device__ oc_uint2(oc_uint s) noexcept 
		:x(s), y(s) {}
	__device__ oc_uint2(oc_uint x, oc_uint y) noexcept 
		:x(x), y(y) {}
	__device__ constexpr oc_uint operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_uint &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_uint3{
	oc_uint x;
	oc_uint y;
	oc_uint z;

	__device__ oc_uint3() noexcept 
		:x{}, y{}, z{} {}
	__device__ oc_uint3(oc_uint s) noexcept 
		:x(s), y(s), z(s) {}
	__device__ oc_uint3(oc_uint x, oc_uint y, oc_uint z) noexcept 
		:x(x), y(y), z(z) {}
	__device__ constexpr oc_uint operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_uint &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_uint4{
	oc_uint x;
	oc_uint y;
	oc_uint z;
	oc_uint w;

	__device__ oc_uint4() noexcept 
		:x{}, y{}, z{}, w{} {}
	__device__ oc_uint4(oc_uint s) noexcept 
		:x(s), y(s), z(s), w(s) {}
	__device__ oc_uint4(oc_uint x, oc_uint y, oc_uint z, oc_uint w) noexcept 
		:x(x), y(y), z(z), w(w) {}
	__device__ constexpr oc_uint operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_uint &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(8) oc_float2{
	oc_float x;
	oc_float y;

	__device__ oc_float2() noexcept 
		:x{}, y{} {}
	__device__ oc_float2(oc_float s) noexcept 
		:x(s), y(s) {}
	__device__ oc_float2(oc_float x, oc_float y) noexcept 
		:x(x), y(y) {}
	__device__ constexpr oc_float operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_float &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_float3{
	oc_float x;
	oc_float y;
	oc_float z;

	__device__ oc_float3() noexcept 
		:x{}, y{}, z{} {}
	__device__ oc_float3(oc_float s) noexcept 
		:x(s), y(s), z(s) {}
	__device__ oc_float3(oc_float x, oc_float y, oc_float z) noexcept 
		:x(x), y(y), z(z) {}
	__device__ constexpr oc_float operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_float &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_float4{
	oc_float x;
	oc_float y;
	oc_float z;
	oc_float w;

	__device__ oc_float4() noexcept 
		:x{}, y{}, z{}, w{} {}
	__device__ oc_float4(oc_float s) noexcept 
		:x(s), y(s), z(s), w(s) {}
	__device__ oc_float4(oc_float x, oc_float y, oc_float z, oc_float w) noexcept 
		:x(x), y(y), z(z), w(w) {}
	__device__ constexpr oc_float operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_float &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(8) oc_bool2{
	oc_bool x;
	oc_bool y;

	__device__ oc_bool2() noexcept 
		:x{}, y{} {}
	__device__ oc_bool2(oc_bool s) noexcept 
		:x(s), y(s) {}
	__device__ oc_bool2(oc_bool x, oc_bool y) noexcept 
		:x(x), y(y) {}
	__device__ constexpr oc_bool operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_bool &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_bool3{
	oc_bool x;
	oc_bool y;
	oc_bool z;

	__device__ oc_bool3() noexcept 
		:x{}, y{}, z{} {}
	__device__ oc_bool3(oc_bool s) noexcept 
		:x(s), y(s), z(s) {}
	__device__ oc_bool3(oc_bool x, oc_bool y, oc_bool z) noexcept 
		:x(x), y(y), z(z) {}
	__device__ constexpr oc_bool operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_bool &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

struct alignas(16) oc_bool4{
	oc_bool x;
	oc_bool y;
	oc_bool z;
	oc_bool w;

	__device__ oc_bool4() noexcept 
		:x{}, y{}, z{}, w{} {}
	__device__ oc_bool4(oc_bool s) noexcept 
		:x(s), y(s), z(s), w(s) {}
	__device__ oc_bool4(oc_bool x, oc_bool y, oc_bool z, oc_bool w) noexcept 
		:x(x), y(y), z(z), w(w) {}
	__device__ constexpr oc_bool operator[](oc_uint i) const noexcept { return (&x)[i]; }
	__device__ constexpr oc_bool &operator[](oc_uint i) noexcept { return (&x)[i]; }
};

__device__ oc_int2 operator+(oc_int2 vec) { return oc_int2(+vec.x, +vec.y); }
__device__ oc_int2 operator-(oc_int2 vec) { return oc_int2(-vec.x, -vec.y); }
__device__ oc_int2 operator!(oc_int2 vec) { return oc_int2(!vec.x, !vec.y); }
__device__ oc_int2 operator~(oc_int2 vec) { return oc_int2(~vec.x, ~vec.y); }
__device__ oc_int3 operator+(oc_int3 vec) { return oc_int3(+vec.x, +vec.y, +vec.z); }
__device__ oc_int3 operator-(oc_int3 vec) { return oc_int3(-vec.x, -vec.y, -vec.z); }
__device__ oc_int3 operator!(oc_int3 vec) { return oc_int3(!vec.x, !vec.y, !vec.z); }
__device__ oc_int3 operator~(oc_int3 vec) { return oc_int3(~vec.x, ~vec.y, ~vec.z); }
__device__ oc_int4 operator+(oc_int4 vec) { return oc_int4(+vec.x, +vec.y, +vec.z, +vec.w); }
__device__ oc_int4 operator-(oc_int4 vec) { return oc_int4(-vec.x, -vec.y, -vec.z, -vec.w); }
__device__ oc_int4 operator!(oc_int4 vec) { return oc_int4(!vec.x, !vec.y, !vec.z, !vec.w); }
__device__ oc_int4 operator~(oc_int4 vec) { return oc_int4(~vec.x, ~vec.y, ~vec.z, ~vec.w); }
__device__ oc_uint2 operator+(oc_uint2 vec) { return oc_uint2(+vec.x, +vec.y); }
__device__ oc_uint2 operator-(oc_uint2 vec) { return oc_uint2(-vec.x, -vec.y); }
__device__ oc_uint2 operator!(oc_uint2 vec) { return oc_uint2(!vec.x, !vec.y); }
__device__ oc_uint2 operator~(oc_uint2 vec) { return oc_uint2(~vec.x, ~vec.y); }
__device__ oc_uint3 operator+(oc_uint3 vec) { return oc_uint3(+vec.x, +vec.y, +vec.z); }
__device__ oc_uint3 operator-(oc_uint3 vec) { return oc_uint3(-vec.x, -vec.y, -vec.z); }
__device__ oc_uint3 operator!(oc_uint3 vec) { return oc_uint3(!vec.x, !vec.y, !vec.z); }
__device__ oc_uint3 operator~(oc_uint3 vec) { return oc_uint3(~vec.x, ~vec.y, ~vec.z); }
__device__ oc_uint4 operator+(oc_uint4 vec) { return oc_uint4(+vec.x, +vec.y, +vec.z, +vec.w); }
__device__ oc_uint4 operator-(oc_uint4 vec) { return oc_uint4(-vec.x, -vec.y, -vec.z, -vec.w); }
__device__ oc_uint4 operator!(oc_uint4 vec) { return oc_uint4(!vec.x, !vec.y, !vec.z, !vec.w); }
__device__ oc_uint4 operator~(oc_uint4 vec) { return oc_uint4(~vec.x, ~vec.y, ~vec.z, ~vec.w); }
__device__ oc_float2 operator+(oc_float2 vec) { return oc_float2(+vec.x, +vec.y); }
__device__ oc_float2 operator-(oc_float2 vec) { return oc_float2(-vec.x, -vec.y); }
__device__ oc_float2 operator!(oc_float2 vec) { return oc_float2(!vec.x, !vec.y); }
__device__ oc_float3 operator+(oc_float3 vec) { return oc_float3(+vec.x, +vec.y, +vec.z); }
__device__ oc_float3 operator-(oc_float3 vec) { return oc_float3(-vec.x, -vec.y, -vec.z); }
__device__ oc_float3 operator!(oc_float3 vec) { return oc_float3(!vec.x, !vec.y, !vec.z); }
__device__ oc_float4 operator+(oc_float4 vec) { return oc_float4(+vec.x, +vec.y, +vec.z, +vec.w); }
__device__ oc_float4 operator-(oc_float4 vec) { return oc_float4(-vec.x, -vec.y, -vec.z, -vec.w); }
__device__ oc_float4 operator!(oc_float4 vec) { return oc_float4(!vec.x, !vec.y, !vec.z, !vec.w); }
__device__ oc_bool2 operator+(oc_bool2 vec) { return oc_bool2(+vec.x, +vec.y); }
__device__ oc_bool2 operator-(oc_bool2 vec) { return oc_bool2(-vec.x, -vec.y); }
__device__ oc_bool2 operator!(oc_bool2 vec) { return oc_bool2(!vec.x, !vec.y); }
__device__ oc_bool2 operator~(oc_bool2 vec) { return oc_bool2(~vec.x, ~vec.y); }
__device__ oc_bool3 operator+(oc_bool3 vec) { return oc_bool3(+vec.x, +vec.y, +vec.z); }
__device__ oc_bool3 operator-(oc_bool3 vec) { return oc_bool3(-vec.x, -vec.y, -vec.z); }
__device__ oc_bool3 operator!(oc_bool3 vec) { return oc_bool3(!vec.x, !vec.y, !vec.z); }
__device__ oc_bool3 operator~(oc_bool3 vec) { return oc_bool3(~vec.x, ~vec.y, ~vec.z); }
__device__ oc_bool4 operator+(oc_bool4 vec) { return oc_bool4(+vec.x, +vec.y, +vec.z, +vec.w); }
__device__ oc_bool4 operator-(oc_bool4 vec) { return oc_bool4(-vec.x, -vec.y, -vec.z, -vec.w); }
__device__ oc_bool4 operator!(oc_bool4 vec) { return oc_bool4(!vec.x, !vec.y, !vec.z, !vec.w); }
__device__ oc_bool4 operator~(oc_bool4 vec) { return oc_bool4(~vec.x, ~vec.y, ~vec.z, ~vec.w); }
